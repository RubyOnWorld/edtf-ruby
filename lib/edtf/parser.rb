#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.10
# from Racc grammer file "".
#

require 'racc/parser.rb'

require 'strscan'

module EDTF
  class Parser < Racc::Parser

module_eval(<<'...end parser.y/module_eval...', 'parser.y', 440)

  @defaults = {
    :level => 2,
    :debug => false
  }.freeze
  
  class << self; attr_reader :defaults; end
  
  attr_reader :options
  
  def initialize(options = {})
    @options = Parser.defaults.merge(options)
  end
  
  def debug?
    !!(options[:debug] || ENV['DEBUG'])
  end
  
  def parse(input)
    parse!(input)
  rescue => e
    warn e.message if debug?
    nil
  end
  
  def parse!(input)
    @yydebug = debug?
    @src = StringScanner.new(input)
    do_parse
  end
  
  def on_error(tid, value, stack)
    raise ArgumentError,
      "failed to parse date: unexpected '#{value}' at #{stack.inspect}"
  end

  def apply_uncertainty(date, uncertainty, scope = nil)
    uncertainty.each do |u|
      scope.nil? ? date.send(u) : date.send(u, scope)
    end
    date
  end
  
  alias uoa apply_uncertainty
  
  def next_token
    case
    when @src.eos?
      nil
    # when @src.scan(/\s+/)
      # ignore whitespace
    when @src.scan(/\(/)
      ['(', @src.matched] 
    # when @src.scan(/\)\?~-/)
    #   [:PUA, [:uncertain!, :approximate!]]
    # when @src.scan(/\)\?-/)
    #   [:PUA, [:uncertain!]]
    # when @src.scan(/\)~-/)
    #   [:PUA, [:approximate!]]
    when @src.scan(/\)/)
      [')', @src.matched]
    when @src.scan(/\[/)
      ['[', @src.matched]
    when @src.scan(/\]/)
      [']', @src.matched]
    when @src.scan(/\{/)
      ['{', @src.matched]
    when @src.scan(/\}/)
      ['}', @src.matched]
    when @src.scan(/T/)
      [:T, @src.matched]
    when @src.scan(/Z/)
      [:Z, @src.matched]
    when @src.scan(/\?~/)
      [:UA, [:uncertain!, :approximate!]]
    when @src.scan(/\?/)
      [:UA, [:uncertain!]]
    when @src.scan(/~/)
      [:UA, [:approximate!]]
    when @src.scan(/open/i)
      [:OPEN, :open]
    when @src.scan(/unkn?own/i) # matches 'unkown' typo too
      [:UNKNOWN, :unknown]
    when @src.scan(/u/)
      [:U, @src.matched]
    when @src.scan(/x/i)
      [:X, @src.matched]
    when @src.scan(/y/)
      [:LONGYEAR, @src.matched]
    when @src.scan(/e/)
      [:E, @src.matched]
    when @src.scan(/\+/)
      ['+', @src.matched]
    when @src.scan(/-\(/)
      ['-(', @src.matched]
    when @src.scan(/-/)
      ['-', @src.matched]
    when @src.scan(/:/)
      [':', @src.matched]
    when @src.scan(/\//)
      ['/', @src.matched]
    when @src.scan(/\s*\.\.\s*/)
      [:DOTS, '..']
    when @src.scan(/\s*,\s*/)
      [',', ',']
    when @src.scan(/\^\w+/)
      ['^', @src.matched[1..-1]]
    when @src.scan(/\d/)
      [@src.matched, @src.matched.to_i]
    else @src.scan(/./)
      [:UNMATCHED, @src.rest]
    end
  end


# -*- racc -*-
...end parser.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
   129,   128,    52,   111,   275,   112,   149,   208,   207,    57,
   236,    43,    45,    40,    55,    42,   214,    44,    43,    45,
    40,   -48,    42,    53,    44,   180,    58,    46,    47,    48,
    49,    50,   207,    56,    46,    47,    48,    49,    50,   128,
   159,   229,    43,    45,    40,    55,    42,   157,    44,    43,
    45,    40,    55,    42,    54,    44,    57,    58,    46,    47,
    48,    49,    50,   215,    56,    46,    47,    48,    49,    50,
    25,    56,    26,    58,   190,   253,   111,    12,   112,    43,
    45,    40,   254,    42,    94,    44,   255,    33,    92,    34,
   189,   191,    36,    25,   141,    46,    47,    48,    49,    50,
    12,    95,    43,    45,    40,    93,    42,   200,    44,   201,
   213,   148,    55,   108,   147,    36,   212,   258,    46,    47,
    48,    49,    50,    87,   165,   111,    12,   112,    43,    45,
    40,    56,    42,   210,    44,   166,   111,   244,   112,   239,
   167,    36,   209,   261,    46,    47,    48,    49,    50,    87,
   133,   108,    12,   202,    43,    45,    40,   111,    42,   112,
    44,   110,   111,   111,   112,   112,   193,    36,   233,   192,
    46,    47,    48,    49,    50,    12,   180,    43,    45,    40,
   240,    42,   239,    44,   232,   234,   111,   264,   112,   124,
    36,   218,   125,    46,    47,    48,    49,    50,    12,   178,
    43,    45,    40,   111,    42,   112,    44,   188,   118,   186,
   117,   187,   104,    36,   121,   265,    46,    47,    48,    49,
    50,    12,   192,    43,    45,    40,   266,    42,   177,    44,
    12,   168,    43,    45,    40,   269,    42,   270,    44,    46,
    47,    48,    49,    50,   158,    36,   156,   154,    46,    47,
    48,    49,    50,    69,   180,    43,    45,   153,   152,    42,
   150,    44,    43,    45,    40,   101,    42,   103,    44,   104,
   146,    46,    47,    48,    49,    50,   280,   125,    46,    47,
    48,    49,    50,    43,    45,    40,   124,    42,   284,    44,
    43,    45,    40,   285,    42,   286,    44,    96,   -66,    46,
    47,    48,    49,    50,   -65,   290,    46,    47,    48,    49,
    50,    43,    45,    40,    67,    42,   292,    44,    43,    45,
    40,   293,    42,    66,    44,   295,   296,    46,    47,    48,
    49,    50,   297,    65,    46,    47,    48,    49,    50,    43,
    45,    40,   300,    42,   301,    44,    43,    45,    40,   180,
    42,   303,    44,   304,   305,    46,    47,    48,    49,    50,
   281,   306,    46,    47,    48,    49,    50,    43,    45,    40,
   307,    42,   308,    44,    43,    45,    64,   -50,    42,   311,
    44,   312,   313,    46,    47,    48,    49,    50,   314,    51,
    46,    47,    48,    49,    50,    43,    45,    40,   316,    42,
   317,    44,    43,    45,   175,   318,    42,   319,    44,   nil,
   nil,    46,    47,    48,    49,    50,   nil,   nil,    46,    47,
    48,    49,    50,    43,    45,    40,   nil,    42,   nil,    44,
    43,    45,   nil,   nil,    42,   nil,    44,   nil,   nil,    46,
    47,    48,    49,    50,   nil,   nil,    46,    47,    48,    49,
    50,    43,    45,    40,   nil,    42,   nil,    44,    43,    45,
    40,   nil,    42,   nil,    44,   nil,   nil,    46,    47,    48,
    49,    50,   nil,   nil,    46,    47,    48,    49,    50,    43,
    45,    40,   nil,    42,   nil,    44,    43,    45,   nil,   nil,
    42,   nil,    44,   nil,   nil,    46,    47,    48,    49,    50,
   nil,   nil,    46,    47,    48,    49,    50,    43,    45,    40,
   nil,    42,   nil,    44,    43,    45,    40,   nil,    42,   nil,
    44,   nil,   nil,    46,    47,    48,    49,    50,   nil,   nil,
    46,    47,    48,    49,    50,    43,    45,    40,   nil,    42,
   nil,    44,    43,    45,   nil,   nil,    42,   nil,    44,   nil,
   nil,    46,    47,    48,    49,    50,   nil,   nil,    46,    47,
    48,    49,    50,    43,    45,    40,   nil,    42,   nil,    44,
    43,    45,    40,   nil,    42,   nil,    44,   nil,   nil,    46,
    47,    48,    49,    50,   nil,   nil,    46,    47,    48,    49,
    50,   172,   194,   170,   nil,   171,   nil,   173,    43,    45,
    40,   nil,    42,   nil,    44,   nil,   nil,   195,   196,   197,
   198,   199,   nil,   nil,    46,    47,    48,    49,    50,    43,
    45,    40,   nil,    42,   nil,    44,    43,    45,    40,   nil,
    42,   nil,    44,   nil,   nil,    46,    47,    48,    49,    50,
   nil,   nil,    46,    47,    48,    49,    50,    43,    45,   276,
   nil,    42,   nil,    44,    43,    45,   274,   nil,    42,   nil,
    44,   nil,   nil,    46,    47,    48,    49,    50,   nil,   nil,
    46,    47,    48,    49,    50,    43,    45,    40,   nil,    42,
   nil,    44,    43,    45,   273,   nil,    42,   nil,    44,   nil,
   nil,    46,    47,    48,    49,    50,   nil,   nil,    46,    47,
    48,    49,    50,    43,    45,   nil,   nil,    42,   nil,    44,
    43,    45,   315,   nil,    42,   nil,    44,   nil,   nil,    46,
    47,    48,    49,    50,   nil,   nil,    46,    47,    48,    49,
    50,    43,    45,   nil,   nil,    42,   nil,    44,    43,    45,
    40,   nil,    42,   nil,    44,   nil,   nil,    46,    47,    48,
    49,    50,   116,   nil,    46,    47,    48,    49,    50,   118,
   250,   310,   118,   104,   117,   249,   104,   nil,   121,   nil,
   118,   250,   117,   nil,   104,   251,   249,   118,   250,   247,
   nil,   104,   nil,   249,   nil,   288,   251,   nil,   118,   250,
   247,   nil,   104,   251,   249,   118,   nil,   117,   281,   104,
   nil,   121,   nil,   260,   251,   118,   250,   247,   118,   104,
   117,   249,   104,   118,   121,   117,   118,   104,   117,   121,
   104,   251,   121,   118,   118,   117,   117,   104,   104,   121,
   121,   188,   271,   186,   118,   187,   117,   272,   104,   118,
   121,   117,   118,   104,   117,   121,   104,   nil,   121,   182,
   184,   nil,   nil,   181,   nil,   183,   172,   169,   170,   118,
   171,   117,   173,   104,   118,   121,   117,   118,   104,   117,
   121,   104,   nil,   121 ]

racc_action_check = [
    63,    63,     5,    93,   245,    93,    73,   127,   127,    73,
   163,    63,    63,    63,   134,    63,   134,    63,   127,   127,
   127,     5,   127,     5,   127,   160,    73,    63,    63,    63,
    63,    63,   224,   134,   127,   127,   127,   127,   127,   151,
    91,   158,   224,   224,   224,    89,   224,    89,   224,   151,
   151,   151,     9,   151,     9,   151,    10,    91,   224,   224,
   224,   224,   224,   144,    89,   151,   151,   151,   151,   151,
     0,     9,     0,    10,   113,   169,    56,     0,    56,     0,
     0,     0,   178,     0,    38,     0,   189,     0,    37,     0,
   113,   113,     0,    67,    67,     0,     0,     0,     0,     0,
    67,    38,    67,    67,    67,    37,    67,   121,    67,   121,
   133,    72,    72,   214,    72,    67,   132,   202,    67,    67,
    67,    67,    67,    34,    98,   214,    34,   214,    34,    34,
    34,    72,    34,   129,    34,    98,   157,   167,   157,   167,
    98,    34,   128,   213,    34,    34,    34,    34,    34,    33,
    66,    54,    33,   123,    33,    33,    33,   124,    33,   124,
    33,    54,    66,    54,    66,    54,   116,    33,   161,   115,
    33,    33,    33,    33,    33,   153,   109,   153,   153,   153,
   166,   153,   166,   153,   161,   161,    92,   218,    92,   220,
   153,   147,   222,   153,   153,   153,   153,   153,   154,   108,
   154,   154,   154,   147,   154,   147,   154,   112,   191,   112,
   191,   112,   191,   154,   191,   225,   154,   154,   154,   154,
   154,    87,   230,    87,    87,    87,   232,    87,   107,    87,
   265,    99,   265,   265,   265,   236,   265,   238,   265,    87,
    87,    87,    87,    87,    90,   265,    88,    79,   265,   265,
   265,   265,   265,    26,   162,    26,    26,    78,    77,    26,
    74,    26,    12,    12,    12,    52,    12,    52,    12,    52,
    71,    26,    26,    26,    26,    26,   253,    60,    12,    12,
    12,    12,    12,   263,   263,   263,    59,   263,   256,   263,
   150,   150,   150,   257,   150,   260,   150,    51,    24,   263,
   263,   263,   263,   263,    23,   264,   150,   150,   150,   150,
   150,    36,    36,    36,    22,    36,   267,    36,   217,   217,
   217,   268,   217,    18,   217,   271,   273,    36,    36,    36,
    36,    36,   274,    17,   217,   217,   217,   217,   217,   104,
   104,   104,   280,   104,   281,   104,   149,   149,   149,   283,
   149,   284,   149,   285,   288,   104,   104,   104,   104,   104,
   290,   292,   149,   149,   149,   149,   149,   148,   148,   148,
   293,   148,   295,   148,   146,   146,    16,    14,   146,   300,
   146,   304,   307,   148,   148,   148,   148,   148,   308,     1,
   146,   146,   146,   146,   146,   145,   145,   145,   311,   145,
   312,   145,   103,   103,   103,   313,   103,   316,   103,   nil,
   nil,   145,   145,   145,   145,   145,   nil,   nil,   103,   103,
   103,   103,   103,   143,   143,   143,   nil,   143,   nil,   143,
   111,   111,   nil,   nil,   111,   nil,   111,   nil,   nil,   143,
   143,   143,   143,   143,   nil,   nil,   111,   111,   111,   111,
   111,   130,   130,   130,   nil,   130,   nil,   130,    62,    62,
    62,   nil,    62,   nil,    62,   nil,   nil,   130,   130,   130,
   130,   130,   nil,   nil,    62,    62,    62,    62,    62,   216,
   216,   216,   nil,   216,   nil,   216,    64,    64,   nil,   nil,
    64,   nil,    64,   nil,   nil,   216,   216,   216,   216,   216,
   nil,   nil,    64,    64,    64,    64,    64,   205,   205,   205,
   nil,   205,   nil,   205,   262,   262,   262,   nil,   262,   nil,
   262,   nil,   nil,   205,   205,   205,   205,   205,   nil,   nil,
   262,   262,   262,   262,   262,    68,    68,    68,   nil,    68,
   nil,    68,    69,    69,   nil,   nil,    69,   nil,    69,   nil,
   nil,    68,    68,    68,    68,    68,   nil,   nil,    69,    69,
    69,    69,    69,    70,    70,    70,   nil,    70,   nil,    70,
   251,   251,   251,   nil,   251,   nil,   251,   nil,   nil,    70,
    70,    70,    70,    70,   nil,   nil,   251,   251,   251,   251,
   251,   118,   118,   118,   nil,   118,   nil,   118,   250,   250,
   250,   nil,   250,   nil,   250,   nil,   nil,   118,   118,   118,
   118,   118,   nil,   nil,   250,   250,   250,   250,   250,    75,
    75,    75,   nil,    75,   nil,    75,   249,   249,   249,   nil,
   249,   nil,   249,   nil,   nil,    75,    75,    75,    75,    75,
   nil,   nil,   249,   249,   249,   249,   249,   247,   247,   247,
   nil,   247,   nil,   247,   244,   244,   244,   nil,   244,   nil,
   244,   nil,   nil,   247,   247,   247,   247,   247,   nil,   nil,
   244,   244,   244,   244,   244,    13,    13,    13,   nil,    13,
   nil,    13,   240,   240,   240,   nil,   240,   nil,   240,   nil,
   nil,    13,    13,    13,    13,    13,   nil,   nil,   240,   240,
   240,   240,   240,   215,   215,   nil,   nil,   215,   nil,   215,
   310,   310,   310,   nil,   310,   nil,   310,   nil,   nil,   215,
   215,   215,   215,   215,   nil,   nil,   310,   310,   310,   310,
   310,   117,   117,   nil,   nil,   117,   nil,   117,   126,   126,
   126,   nil,   126,   nil,   126,   nil,   nil,   117,   117,   117,
   117,   117,    57,   nil,   126,   126,   126,   126,   126,   297,
   297,   297,    57,   297,    57,   297,    57,   nil,    57,   nil,
   296,   296,   296,   nil,   296,   297,   296,   275,   275,   275,
   nil,   275,   nil,   275,   nil,   261,   296,   nil,   270,   270,
   270,   nil,   270,   275,   270,   261,   nil,   261,   254,   261,
   nil,   261,   nil,   212,   270,   168,   168,   168,   254,   168,
   254,   168,   254,   212,   254,   212,   233,   212,   233,   212,
   233,   168,   233,   125,   159,   125,   159,   125,   159,   125,
   159,   239,   239,   239,   190,   239,   190,   239,   190,   255,
   190,   255,   234,   255,   234,   255,   234,   nil,   234,   110,
   110,   nil,   nil,   110,   nil,   110,   101,   101,   101,    95,
   101,    95,   101,    95,    94,    95,    94,    58,    94,    58,
    94,    58,   nil,    58 ]

racc_action_pointer = [
    63,   389,   nil,   nil,   nil,     0,   nil,   nil,   nil,    40,
    42,   nil,   246,   659,   356,   nil,   372,   310,   309,   nil,
   nil,   nil,   293,   304,   298,   nil,   239,   nil,   nil,   nil,
   nil,   nil,   nil,   138,   112,   nil,   295,    74,    70,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   297,   249,   nil,   145,   nil,    58,   746,   851,   272,
   263,   nil,   442,    -5,   470,   nil,   144,    86,   519,   526,
   547,   266,   100,    -5,   249,   603,   nil,   233,   229,   219,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   207,   219,    33,
   214,    26,   168,   -15,   848,   843,   nil,   nil,   121,   216,
   nil,   840,   nil,   386,   323,   nil,   nil,   216,   193,   164,
   833,   414,   191,    60,   nil,   157,   160,   715,   575,   nil,
   nil,    89,   nil,   123,   139,   807,   722,     2,   136,   128,
   435,   nil,   102,   104,     2,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   407,    59,   379,   358,   185,   351,   330,
   274,    33,   nil,   161,   184,   nil,   nil,   118,    29,   808,
    13,   154,   242,   -20,   nil,   nil,   162,   119,   789,    60,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    68,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    74,
   818,   192,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   105,   nil,   nil,   491,   nil,   nil,   nil,   nil,
   nil,   nil,   797,   129,   107,   687,   463,   302,   181,   nil,
   175,   nil,   178,   nil,    26,   187,   nil,   nil,   nil,   nil,
   210,   nil,   214,   800,   826,   nil,   223,   nil,   222,   815,
   666,   nil,   nil,   nil,   638,   -11,   nil,   631,   nil,   610,
   582,   554,   nil,   258,   792,   823,   258,   263,   nil,   nil,
   289,   779,   498,   267,   291,   216,   nil,   286,   291,   nil,
   772,   310,   nil,   311,   317,   761,   nil,   nil,   nil,   nil,
   324,   338,   nil,   337,   339,   341,   nil,   nil,   348,   nil,
   354,   nil,   349,   358,   nil,   354,   754,   743,   nil,   nil,
   364,   nil,   nil,   nil,   351,   nil,   nil,   352,   370,   nil,
   694,   380,   388,   393,   nil,   nil,   389,   nil,   nil,   nil ]

racc_action_default = [
  -176,  -176,    -1,    -2,    -3,    -4,    -5,    -6,    -7,    -8,
    -9,   -10,  -176,  -176,   -34,   -35,   -36,   -37,   -38,   -39,
   -40,   -41,  -176,   -49,   -51,   -52,  -176,   -64,   -67,   -68,
   -69,   -70,   -71,  -176,  -176,  -107,  -176,  -109,  -110,  -111,
  -128,  -129,  -130,  -131,  -132,  -133,  -134,  -135,  -136,  -137,
  -138,  -176,  -176,   -76,  -176,  -112,  -176,  -176,  -176,    -8,
    -9,   -11,  -176,  -176,  -176,   -72,  -176,  -176,   -55,  -176,
  -170,  -176,    -8,    -9,   -10,  -176,   -38,  -176,   -81,   -86,
   -87,   -88,   -90,   -91,   -92,   -93,   -94,  -176,  -176,  -176,
  -176,  -176,  -176,  -176,  -176,  -176,   320,   -12,   -13,  -176,
   -16,  -176,   -31,  -176,  -176,  -152,   -27,   -29,  -176,  -126,
  -176,  -176,  -176,  -176,   -28,   -30,  -176,  -176,  -176,  -153,
  -160,  -176,  -162,  -176,  -176,  -176,  -176,  -176,  -176,  -176,
   -73,  -174,  -176,  -176,    -8,   -47,   -48,   -49,   -50,   -51,
   -53,   -54,   -58,   -56,  -176,  -171,  -176,  -176,   -98,   -97,
   -96,  -176,   -79,  -176,  -176,   -95,   -80,  -176,  -176,  -176,
  -126,  -176,  -126,  -176,   -14,   -18,  -176,  -176,  -176,  -176,
  -147,  -148,  -149,  -150,  -145,  -151,  -146,  -114,   -44,   -59,
  -127,   -60,   -61,   -62,   -63,  -139,  -140,  -141,  -142,  -176,
  -176,  -176,  -120,   -45,  -154,  -155,  -156,  -157,  -158,  -159,
  -161,  -163,  -176,   -29,   -30,  -176,   -26,   -42,   -77,   -43,
   -78,  -175,  -176,  -176,  -176,  -176,  -172,   -74,  -176,  -101,
  -176,  -100,  -176,   -99,  -176,   -83,   -84,   -85,   -89,  -108,
  -176,  -113,  -176,  -176,  -176,  -117,  -176,   -19,  -176,  -176,
  -176,  -143,   -20,   -21,  -176,  -176,   -32,  -176,  -164,  -176,
  -176,  -176,  -169,  -176,  -176,  -115,  -176,  -176,  -121,  -102,
  -176,  -176,   -75,  -173,   -44,  -176,  -116,  -176,  -176,  -118,
  -176,  -176,  -144,  -176,  -176,  -176,  -168,  -165,  -166,  -167,
  -176,  -176,  -106,  -126,  -176,  -176,  -105,  -103,  -176,   -57,
  -176,   -82,  -176,  -176,   -23,  -176,  -176,  -176,   -15,   -33,
  -176,   -46,  -119,  -122,  -176,  -104,  -124,  -176,  -176,   -25,
  -176,  -176,  -176,  -176,   -24,   -22,  -176,  -123,  -125,   -17 ]

racc_goto_table = [
    70,   179,   130,    13,   228,    11,   248,   115,   123,   226,
   227,   113,   245,     5,    18,     9,    63,    11,    68,    10,
    23,   132,    22,    24,    71,    15,    14,    59,   241,   241,
   102,    60,   237,   243,    77,    88,    75,    75,   131,   309,
   309,   299,    16,    70,   162,   163,    17,   160,   161,   242,
   100,    89,   231,   135,   235,    91,   298,    99,   164,    98,
   109,   143,    97,    27,    28,   126,   127,   144,    29,    30,
    75,   142,    11,   145,    31,   204,    32,   174,   151,   203,
   136,    18,   134,    61,   217,   185,    10,   137,     6,   140,
   139,   174,    11,   138,     4,   225,     3,     2,    90,   105,
   155,     1,    59,   nil,   nil,   nil,    60,   176,   248,   230,
   nil,   nil,   nil,   248,   294,   228,   nil,   nil,   nil,   nil,
   131,   291,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   205,
   206,   nil,   nil,   211,   248,   248,   nil,   nil,   nil,   nil,
   256,   257,   nil,   nil,   nil,   nil,   142,   nil,   216,   nil,
   nil,   nil,   nil,   262,   224,   223,    75,    75,   nil,   nil,
   nil,   nil,   259,   219,   220,   220,   nil,   nil,   221,   222,
   nil,   nil,   nil,   nil,   nil,   302,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   267,   268,   nil,   nil,   nil,   nil,   131,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   282,   283,   nil,   nil,   206,   nil,
   nil,   287,   nil,   nil,   185,   nil,   nil,   nil,   185,   263,
   211,   174,   nil,   nil,   nil,   nil,   nil,   206,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   277,   278,   279,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   211,   289,   nil,    75,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   174 ]

racc_goto_check = [
    43,    45,    52,    23,    58,    11,    66,    26,    26,    57,
    57,    24,    16,     5,    34,     9,    23,    11,    42,    10,
    40,    24,    38,    41,    53,    31,    30,     9,    25,    25,
    28,    10,    19,    19,    54,    54,    23,    23,    43,    22,
    22,    29,    32,    43,    26,    26,    33,    24,    24,    20,
    18,     9,    45,    39,    45,    10,    17,    15,    14,    13,
    44,    42,    12,    46,    47,    23,    23,    53,    48,    49,
    23,    23,    11,    23,    50,    26,    51,    43,    23,    24,
     5,    34,     9,     7,    52,    43,    10,    40,     6,    38,
    41,    43,    11,    30,     4,    56,     3,     2,    61,    65,
     5,     1,     9,   nil,   nil,   nil,    10,    23,    66,    26,
   nil,   nil,   nil,    66,    16,    58,   nil,   nil,   nil,   nil,
    43,    57,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    23,
    23,   nil,   nil,    23,    66,    66,   nil,   nil,   nil,   nil,
    26,    26,   nil,   nil,   nil,   nil,    23,   nil,    23,   nil,
   nil,   nil,   nil,    52,    23,    11,    23,    23,   nil,   nil,
   nil,   nil,    26,     9,     9,     9,   nil,   nil,    10,    10,
   nil,   nil,   nil,   nil,   nil,    45,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    26,    26,   nil,   nil,   nil,   nil,    43,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    26,    26,   nil,   nil,    23,   nil,
   nil,    26,   nil,   nil,    43,   nil,   nil,   nil,    43,    23,
    23,    43,   nil,   nil,   nil,   nil,   nil,    23,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    23,    23,    23,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    23,    23,   nil,    23,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    43 ]

racc_goto_pointer = [
   nil,   101,    97,    96,    94,    13,    88,    71,   nil,    15,
    19,     5,    10,     7,   -40,     5,  -156,  -219,    -2,  -134,
  -118,   nil,  -257,     3,   -45,  -138,   -50,   nil,   -22,  -234,
    26,    25,    42,    46,    14,   nil,   nil,   nil,    22,   -14,
    20,    23,    -8,   -26,     6,  -108,    63,    64,    68,    69,
    74,    76,   -62,    -2,     1,   nil,   -58,  -144,  -150,   nil,
   nil,    62,   nil,   nil,   nil,    47,  -162,   nil ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,    84,   nil,     7,     8,    72,
    73,    74,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   238,   252,    62,   107,   106,   nil,   114,   nil,   246,
    86,   nil,   nil,   nil,    76,    19,    20,    21,   nil,   nil,
    85,   nil,   nil,    41,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    78,    79,    80,    81,    82,
    83,    35,    37,    38,    39,   119,   120,   122 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 38, :_reduce_none,
  1, 38, :_reduce_none,
  1, 38, :_reduce_none,
  1, 39, :_reduce_none,
  1, 39, :_reduce_none,
  1, 42, :_reduce_none,
  1, 42, :_reduce_none,
  1, 44, :_reduce_8,
  1, 44, :_reduce_9,
  1, 44, :_reduce_10,
  2, 45, :_reduce_11,
  3, 43, :_reduce_12,
  1, 49, :_reduce_none,
  2, 49, :_reduce_14,
  5, 50, :_reduce_15,
  1, 50, :_reduce_none,
  8, 55, :_reduce_17,
  1, 51, :_reduce_18,
  2, 51, :_reduce_19,
  2, 51, :_reduce_20,
  1, 57, :_reduce_none,
  5, 57, :_reduce_22,
  3, 56, :_reduce_23,
  5, 56, :_reduce_24,
  4, 56, :_reduce_25,
  4, 46, :_reduce_26,
  1, 61, :_reduce_none,
  1, 63, :_reduce_none,
  3, 47, :_reduce_29,
  3, 48, :_reduce_30,
  1, 52, :_reduce_none,
  1, 53, :_reduce_none,
  1, 54, :_reduce_none,
  1, 40, :_reduce_none,
  1, 40, :_reduce_none,
  1, 40, :_reduce_none,
  1, 40, :_reduce_none,
  1, 67, :_reduce_38,
  1, 67, :_reduce_none,
  1, 67, :_reduce_none,
  1, 67, :_reduce_none,
  4, 71, :_reduce_42,
  4, 71, :_reduce_43,
  4, 72, :_reduce_44,
  4, 73, :_reduce_45,
  7, 74, :_reduce_46,
  3, 68, :_reduce_47,
  1, 75, :_reduce_none,
  1, 75, :_reduce_none,
  1, 75, :_reduce_none,
  1, 75, :_reduce_none,
  1, 75, :_reduce_none,
  1, 76, :_reduce_none,
  1, 76, :_reduce_none,
  2, 69, :_reduce_55,
  3, 69, :_reduce_56,
  5, 79, :_reduce_57,
  2, 79, :_reduce_58,
  4, 70, :_reduce_59,
  2, 81, :_reduce_60,
  2, 81, :_reduce_61,
  2, 81, :_reduce_62,
  2, 81, :_reduce_63,
  1, 41, :_reduce_none,
  1, 41, :_reduce_none,
  1, 41, :_reduce_none,
  1, 41, :_reduce_none,
  1, 41, :_reduce_none,
  1, 41, :_reduce_none,
  1, 41, :_reduce_none,
  1, 41, :_reduce_none,
  2, 83, :_reduce_72,
  3, 88, :_reduce_73,
  4, 88, :_reduce_74,
  5, 88, :_reduce_75,
  2, 87, :_reduce_76,
  4, 86, :_reduce_77,
  4, 86, :_reduce_78,
  3, 84, :_reduce_79,
  3, 85, :_reduce_80,
  1, 91, :_reduce_81,
  5, 91, :_reduce_82,
  3, 91, :_reduce_83,
  3, 91, :_reduce_84,
  3, 91, :_reduce_85,
  1, 91, :_reduce_86,
  1, 91, :_reduce_87,
  1, 93, :_reduce_88,
  3, 93, :_reduce_89,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 96, :_reduce_none,
  1, 96, :_reduce_none,
  1, 96, :_reduce_none,
  2, 92, :_reduce_95,
  2, 94, :_reduce_96,
  2, 94, :_reduce_97,
  2, 94, :_reduce_98,
  3, 97, :_reduce_99,
  3, 97, :_reduce_100,
  3, 97, :_reduce_101,
  5, 78, :_reduce_102,
  6, 78, :_reduce_103,
  7, 78, :_reduce_104,
  6, 78, :_reduce_105,
  6, 78, :_reduce_106,
  1, 77, :_reduce_none,
  4, 77, :_reduce_108,
  1, 98, :_reduce_109,
  1, 98, :_reduce_110,
  1, 98, :_reduce_111,
  2, 99, :_reduce_112,
  4, 100, :_reduce_113,
  4, 100, :_reduce_114,
  5, 100, :_reduce_115,
  5, 100, :_reduce_116,
  4, 101, :_reduce_117,
  5, 101, :_reduce_118,
  7, 101, :_reduce_119,
  4, 101, :_reduce_120,
  5, 101, :_reduce_121,
  7, 101, :_reduce_122,
  9, 101, :_reduce_123,
  7, 101, :_reduce_124,
  9, 101, :_reduce_125,
  0, 82, :_reduce_126,
  1, 82, :_reduce_none,
  1, 60, :_reduce_128,
  1, 60, :_reduce_none,
  1, 80, :_reduce_none,
  1, 80, :_reduce_none,
  1, 80, :_reduce_none,
  1, 80, :_reduce_none,
  1, 80, :_reduce_none,
  1, 80, :_reduce_none,
  1, 80, :_reduce_none,
  1, 80, :_reduce_none,
  1, 80, :_reduce_none,
  2, 62, :_reduce_139,
  2, 62, :_reduce_140,
  2, 62, :_reduce_141,
  2, 62, :_reduce_142,
  1, 58, :_reduce_none,
  2, 58, :_reduce_144,
  2, 102, :_reduce_145,
  2, 102, :_reduce_146,
  2, 102, :_reduce_147,
  2, 102, :_reduce_148,
  2, 102, :_reduce_149,
  2, 102, :_reduce_150,
  2, 65, :_reduce_none,
  1, 65, :_reduce_none,
  1, 103, :_reduce_none,
  2, 103, :_reduce_154,
  2, 103, :_reduce_155,
  2, 103, :_reduce_156,
  2, 103, :_reduce_157,
  2, 103, :_reduce_158,
  2, 103, :_reduce_159,
  1, 104, :_reduce_none,
  2, 104, :_reduce_161,
  1, 64, :_reduce_none,
  2, 64, :_reduce_163,
  1, 59, :_reduce_none,
  2, 59, :_reduce_165,
  2, 59, :_reduce_166,
  2, 59, :_reduce_167,
  2, 66, :_reduce_none,
  1, 66, :_reduce_none,
  1, 90, :_reduce_170,
  2, 90, :_reduce_171,
  3, 90, :_reduce_172,
  4, 90, :_reduce_173,
  1, 89, :_reduce_174,
  2, 89, :_reduce_175 ]

racc_reduce_n = 176

racc_shift_n = 320

racc_token_table = {
  false => 0,
  :error => 1,
  :T => 2,
  :Z => 3,
  :E => 4,
  :X => 5,
  :U => 6,
  :UNKNOWN => 7,
  :OPEN => 8,
  :LONGYEAR => 9,
  :UNMATCHED => 10,
  :DOTS => 11,
  :UA => 12,
  :PUA => 13,
  "-" => 14,
  ":" => 15,
  "2" => 16,
  "4" => 17,
  "0" => 18,
  "+" => 19,
  "1" => 20,
  "/" => 21,
  "3" => 22,
  "^" => 23,
  "[" => 24,
  "]" => 25,
  "{" => 26,
  "}" => 27,
  "," => 28,
  "(" => 29,
  ")" => 30,
  "-(" => 31,
  "5" => 32,
  "6" => 33,
  "7" => 34,
  "8" => 35,
  "9" => 36 }

racc_nt_base = 37

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "T",
  "Z",
  "E",
  "X",
  "U",
  "UNKNOWN",
  "OPEN",
  "LONGYEAR",
  "UNMATCHED",
  "DOTS",
  "UA",
  "PUA",
  "\"-\"",
  "\":\"",
  "\"2\"",
  "\"4\"",
  "\"0\"",
  "\"+\"",
  "\"1\"",
  "\"/\"",
  "\"3\"",
  "\"^\"",
  "\"[\"",
  "\"]\"",
  "\"{\"",
  "\"}\"",
  "\",\"",
  "\"(\"",
  "\")\"",
  "\"-(\"",
  "\"5\"",
  "\"6\"",
  "\"7\"",
  "\"8\"",
  "\"9\"",
  "$start",
  "edtf",
  "level_0_expression",
  "level_1_expression",
  "level_2_expression",
  "date",
  "date_time",
  "positive_date",
  "negative_date",
  "year",
  "year_month",
  "year_month_day",
  "time",
  "base_time",
  "zone_offset",
  "hour",
  "minute",
  "second",
  "midnight",
  "zone_offset_hour",
  "positive_zone_offset",
  "d01_13",
  "d01_59",
  "digit",
  "month",
  "d01_12",
  "day",
  "d01_31",
  "d00_23",
  "d00_59",
  "unspecified",
  "level_1_interval",
  "long_year_simple",
  "season",
  "unspecified_year",
  "unspecified_month",
  "unspecified_day",
  "unspecified_day_and_month",
  "level_1_start",
  "level_1_end",
  "partial_uncertain_or_approximate",
  "partial_unspecified",
  "long_year",
  "positive_digit",
  "season_number",
  "ua",
  "season_qualified",
  "choice_list",
  "inclusive_list",
  "masked_precision",
  "date_and_calendar",
  "long_year_scientific",
  "integer",
  "int1_4",
  "list",
  "earlier",
  "list_elements",
  "later",
  "list_element",
  "atomic",
  "consecutives",
  "pua_base",
  "pua_year",
  "pua_year_month",
  "pua_year_month_day",
  "d01_23",
  "d01_29",
  "d01_30" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

# reduce 2 omitted

# reduce 3 omitted

# reduce 4 omitted

# reduce 5 omitted

# reduce 6 omitted

# reduce 7 omitted

module_eval(<<'.,.,', 'parser.y', 27)
  def _reduce_8(val, _values, result)
     result = Date.new(val[0]).year_precision! 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 28)
  def _reduce_9(val, _values, result)
     result = Date.new(*val.flatten).month_precision! 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 29)
  def _reduce_10(val, _values, result)
     result = Date.new(*val.flatten).day_precision! 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 32)
  def _reduce_11(val, _values, result)
     result = -val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 36)
  def _reduce_12(val, _values, result)
       result = DateTime.new(val[0].year, val[0].month, val[0].day, *val[2])
  
    result
  end
.,.,

# reduce 13 omitted

module_eval(<<'.,.,', 'parser.y', 40)
  def _reduce_14(val, _values, result)
     result = val.flatten 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 42)
  def _reduce_15(val, _values, result)
     result = val.values_at(0, 2, 4) 
    result
  end
.,.,

# reduce 16 omitted

module_eval(<<'.,.,', 'parser.y', 45)
  def _reduce_17(val, _values, result)
     result = [24, 0, 0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 47)
  def _reduce_18(val, _values, result)
     result = 0 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 48)
  def _reduce_19(val, _values, result)
     result = -1 * val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 49)
  def _reduce_20(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 21 omitted

module_eval(<<'.,.,', 'parser.y', 53)
  def _reduce_22(val, _values, result)
     result = 0 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 57)
  def _reduce_23(val, _values, result)
     result = Rational(val[0] * 60 + val[2], 1440) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 58)
  def _reduce_24(val, _values, result)
     result = Rational(840, 1440) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 59)
  def _reduce_25(val, _values, result)
     result = Rational(val[3], 1440) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 63)
  def _reduce_26(val, _values, result)
        result = val.zip([1000,100,10,1]).reduce(0) { |s,(a,b)| s += a * b }
  
    result
  end
.,.,

# reduce 27 omitted

# reduce 28 omitted

module_eval(<<'.,.,', 'parser.y', 69)
  def _reduce_29(val, _values, result)
     result = [val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 76)
  def _reduce_30(val, _values, result)
        result = val[0] << val[2]
    if result[2] > 31 || (result[2] > 30 && [2,4,6,9,11].include?(result[1])) || (result[2] > 29 && result[1] == 2)
      raise ArgumentError, "invalid date (invalid days #{result[2]} for month #{result[1]})"
    end
  
    result
  end
.,.,

# reduce 31 omitted

# reduce 32 omitted

# reduce 33 omitted

# reduce 34 omitted

# reduce 35 omitted

# reduce 36 omitted

# reduce 37 omitted

module_eval(<<'.,.,', 'parser.y', 99)
  def _reduce_38(val, _values, result)
                    result = Date.new(val[0][0]).year_precision!
                result.unspecified.year[2,2] = val[0][1]
              
    result
  end
.,.,

# reduce 39 omitted

# reduce 40 omitted

# reduce 41 omitted

module_eval(<<'.,.,', 'parser.y', 110)
  def _reduce_42(val, _values, result)
          result = [val[0,3].zip([1000,100,10]).reduce(0) { |s,(a,b)| s += a * b }, [false,true]]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 114)
  def _reduce_43(val, _values, result)
          result = [val[0,2].zip([1000,100]).reduce(0) { |s,(a,b)| s += a * b }, [true, true]]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 118)
  def _reduce_44(val, _values, result)
        result = Date.new(val[0]).unspecified!(:month)
    result.precision = :month
  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 123)
  def _reduce_45(val, _values, result)
        result = Date.new(*val[0]).unspecified!(:day)
  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 127)
  def _reduce_46(val, _values, result)
        result = Date.new(val[0]).unspecified!([:day,:month])
  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 132)
  def _reduce_47(val, _values, result)
        result = Interval.new(val[0], val[2])
  
    result
  end
.,.,

# reduce 48 omitted

# reduce 49 omitted

# reduce 50 omitted

# reduce 51 omitted

# reduce 52 omitted

# reduce 53 omitted

# reduce 54 omitted

module_eval(<<'.,.,', 'parser.y', 143)
  def _reduce_55(val, _values, result)
          result = Date.new(val[1])
      result.precision = :year
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 148)
  def _reduce_56(val, _values, result)
          result = Date.new(-1 * val[2])
      result.precision = :year
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 155)
  def _reduce_57(val, _values, result)
          result = val.zip([10000,1000,100,10,1]).reduce(0) { |s,(a,b)| s += a * b }
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 157)
  def _reduce_58(val, _values, result)
     result = 10 * val[0] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 162)
  def _reduce_59(val, _values, result)
        result = Season.new(val[0], val[2])
    val[3].each { |ua| result.send(ua) }
  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 166)
  def _reduce_60(val, _values, result)
     result = 21 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 167)
  def _reduce_61(val, _values, result)
     result = 22 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 168)
  def _reduce_62(val, _values, result)
     result = 23 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 169)
  def _reduce_63(val, _values, result)
     result = 24 
    result
  end
.,.,

# reduce 64 omitted

# reduce 65 omitted

# reduce 66 omitted

# reduce 67 omitted

# reduce 68 omitted

# reduce 69 omitted

# reduce 70 omitted

# reduce 71 omitted

module_eval(<<'.,.,', 'parser.y', 187)
  def _reduce_72(val, _values, result)
     result = val[0]; result.qualifier = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 193)
  def _reduce_73(val, _values, result)
          result = Date.new(val[0].year * 10 ** val[2]).year_precision!
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 197)
  def _reduce_74(val, _values, result)
          result = Date.new(val[1] * 10 ** val[3]).year_precision!
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 201)
  def _reduce_75(val, _values, result)
          result = Date.new(-1 * val[2] * 10 ** val[4]).year_precision!
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 206)
  def _reduce_76(val, _values, result)
     result = val[0]; result.calendar = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 212)
  def _reduce_77(val, _values, result)
          d = val[0,3].zip([1000,100,10]).reduce(0) { |s,(a,b)| s += a * b }
      result = EDTF::Decade.new(d)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 217)
  def _reduce_78(val, _values, result)
          d = val[0,2].zip([1000,100]).reduce(0) { |s,(a,b)| s += a * b }
      result = EDTF::Century.new(d)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 223)
  def _reduce_79(val, _values, result)
     result = val[1].choice! 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 225)
  def _reduce_80(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 227)
  def _reduce_81(val, _values, result)
     result = EDTF::Set.new(val[0]).earlier! 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 228)
  def _reduce_82(val, _values, result)
     result = EDTF::Set.new([val[0]] + val[2] + [val[4]]).earlier!.later! 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 229)
  def _reduce_83(val, _values, result)
     result = EDTF::Set.new([val[0]] + val[2]).earlier! 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 230)
  def _reduce_84(val, _values, result)
     result = EDTF::Set.new([val[0]] + [val[2]]).earlier!.later! 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 231)
  def _reduce_85(val, _values, result)
     result = EDTF::Set.new(val[0] + [val[2]]).later! 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 232)
  def _reduce_86(val, _values, result)
     result = EDTF::Set.new(*val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 233)
  def _reduce_87(val, _values, result)
     result = EDTF::Set.new(val[0]).later! 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 236)
  def _reduce_88(val, _values, result)
     result = [val[0]].flatten 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 237)
  def _reduce_89(val, _values, result)
     result = val[0] + [val[2]].flatten 
    result
  end
.,.,

# reduce 90 omitted

# reduce 91 omitted

# reduce 92 omitted

# reduce 93 omitted

# reduce 94 omitted

module_eval(<<'.,.,', 'parser.y', 249)
  def _reduce_95(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 251)
  def _reduce_96(val, _values, result)
     result = Date.new(*val[0]).year_precision! 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 252)
  def _reduce_97(val, _values, result)
     result = Date.new(*val[0]).month_precision! 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 253)
  def _reduce_98(val, _values, result)
     result = Date.new(val[0]).year_precision! 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 256)
  def _reduce_99(val, _values, result)
     result = (Date.new(val[0]).day_precision! .. Date.new(val[2]).day_precision!) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 257)
  def _reduce_100(val, _values, result)
     result = (Date.new(val[0]).month_precision! .. Date.new(val[2]).month_precision!) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 258)
  def _reduce_101(val, _values, result)
     result = (Date.new(val[0]).year_precision! .. Date.new(val[2]).year_precision!) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 264)
  def _reduce_102(val, _values, result)
          result = Date.new(val[0][0], val[2], val[4])
      result.unspecified.year[2,2] = val[0][1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 269)
  def _reduce_103(val, _values, result)
          result = Date.new(val[0][0], 1, val[5])
      result.unspecified.year[2,2] = val[0][1]
      result.unspecified!(:month)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 275)
  def _reduce_104(val, _values, result)
          result = Date.new(val[0][0], 1, 1)
      result.unspecified.year[2,2] = val[0][1]
      result.unspecified!([:month, :day])
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 281)
  def _reduce_105(val, _values, result)
          result = Date.new(val[0][0], val[2], 1)
      result.unspecified.year[2,2] = val[0][1]
      result.unspecified!(:day)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 287)
  def _reduce_106(val, _values, result)
          result = Date.new(val[0], 1, val[5])
      result.unspecified!(:month)
    
    result
  end
.,.,

# reduce 107 omitted

module_eval(<<'.,.,', 'parser.y', 294)
  def _reduce_108(val, _values, result)
     result = uoa(val[1], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 297)
  def _reduce_109(val, _values, result)
     result = val[0].year_precision! 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 298)
  def _reduce_110(val, _values, result)
     result = val[0][0].month_precision! 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 299)
  def _reduce_111(val, _values, result)
     result = val[0].day_precision! 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 301)
  def _reduce_112(val, _values, result)
     result = uoa(Date.new(val[0]), val[1], :year) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 305)
  def _reduce_113(val, _values, result)
          result = [uoa(val[0].change(:month => val[2]), val[3], [:month, :year])]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 308)
  def _reduce_114(val, _values, result)
            result = [uoa(Date.new(val[0], val[2]), val[3], [:year, :month])]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 311)
  def _reduce_115(val, _values, result)
            result = [uoa(Date.new(val[0], val[2]), val[4], [:month]), true]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 314)
  def _reduce_116(val, _values, result)
            result = [uoa(val[0].change(:month => val[2]), val[4], [:month]), true]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 320)
  def _reduce_117(val, _values, result)
          result = uoa(val[0][0].change(:day => val[2]), val[3], val[0][1] ? [:day] : nil)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 323)
  def _reduce_118(val, _values, result)
            result = uoa(val[0][0].change(:day => val[2]), val[4], [:day])
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 326)
  def _reduce_119(val, _values, result)
            result = uoa(uoa(Date.new(val[0], val[2], val[5]), val[4], :month), val[6], :day)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 329)
  def _reduce_120(val, _values, result)
            result = uoa(Date.new(val[0][0], val[0][1], val[2]), val[3])
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 332)
  def _reduce_121(val, _values, result)
            result = uoa(Date.new(val[0][0], val[0][1], val[2]), val[4], [:day])
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 335)
  def _reduce_122(val, _values, result)
            result = uoa(Date.new(val[0], val[2], val[4]), val[6], [:month, :day])
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 338)
  def _reduce_123(val, _values, result)
            result = Date.new(val[0], val[2], val[4])
        result = uoa(result, val[6], [:day])
        result = uoa(result, val[8], [:month, :day])
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 343)
  def _reduce_124(val, _values, result)
            result = val[0].change(:month => val[2], :day => val[4])
        result = uoa(result, val[6], [:month, :day])
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 347)
  def _reduce_125(val, _values, result)
            result = val[0].change(:month => val[2], :day => val[4])
        result = uoa(result, val[6], [:day])
        result = uoa(result, val[8], [:month, :day])
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 358)
  def _reduce_126(val, _values, result)
     result = [] 
    result
  end
.,.,

# reduce 127 omitted

module_eval(<<'.,.,', 'parser.y', 362)
  def _reduce_128(val, _values, result)
     result = 0 
    result
  end
.,.,

# reduce 129 omitted

# reduce 130 omitted

# reduce 131 omitted

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

# reduce 138 omitted

module_eval(<<'.,.,', 'parser.y', 368)
  def _reduce_139(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 369)
  def _reduce_140(val, _values, result)
     result = 10 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 370)
  def _reduce_141(val, _values, result)
     result = 11 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 371)
  def _reduce_142(val, _values, result)
     result = 12 
    result
  end
.,.,

# reduce 143 omitted

module_eval(<<'.,.,', 'parser.y', 375)
  def _reduce_144(val, _values, result)
     result = 13 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 378)
  def _reduce_145(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 379)
  def _reduce_146(val, _values, result)
     result = 10 + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 380)
  def _reduce_147(val, _values, result)
     result = 20 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 381)
  def _reduce_148(val, _values, result)
     result = 21 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 382)
  def _reduce_149(val, _values, result)
     result = 22 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 383)
  def _reduce_150(val, _values, result)
     result = 23 
    result
  end
.,.,

# reduce 151 omitted

# reduce 152 omitted

# reduce 153 omitted

module_eval(<<'.,.,', 'parser.y', 391)
  def _reduce_154(val, _values, result)
     result = 24 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 392)
  def _reduce_155(val, _values, result)
     result = 25 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 393)
  def _reduce_156(val, _values, result)
     result = 26 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 394)
  def _reduce_157(val, _values, result)
     result = 27 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 395)
  def _reduce_158(val, _values, result)
     result = 28 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 396)
  def _reduce_159(val, _values, result)
     result = 29 
    result
  end
.,.,

# reduce 160 omitted

module_eval(<<'.,.,', 'parser.y', 400)
  def _reduce_161(val, _values, result)
     result = 30 
    result
  end
.,.,

# reduce 162 omitted

module_eval(<<'.,.,', 'parser.y', 404)
  def _reduce_163(val, _values, result)
     result = 31 
    result
  end
.,.,

# reduce 164 omitted

module_eval(<<'.,.,', 'parser.y', 408)
  def _reduce_165(val, _values, result)
     result = 30 + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 409)
  def _reduce_166(val, _values, result)
     result = 40 + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 410)
  def _reduce_167(val, _values, result)
     result = 50 + val[1] 
    result
  end
.,.,

# reduce 168 omitted

# reduce 169 omitted

module_eval(<<'.,.,', 'parser.y', 417)
  def _reduce_170(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 418)
  def _reduce_171(val, _values, result)
     result = 10 * val[0] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 421)
  def _reduce_172(val, _values, result)
               result = val.zip([100,10,1]).reduce(0) { |s,(a,b)| s += a * b }
         
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 425)
  def _reduce_173(val, _values, result)
               result = val.zip([1000,100,10,1]).reduce(0) { |s,(a,b)| s += a * b }
         
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 429)
  def _reduce_174(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 430)
  def _reduce_175(val, _values, result)
     result = 10 * val[0] + val[1] 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module EDTF
