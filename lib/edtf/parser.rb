#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.6
# from Racc grammer file "".
#

require 'racc/parser.rb'

require 'strscan'

module EDTF
  class Parser < Racc::Parser

module_eval(<<'...end parser.y/module_eval...', 'parser.y', 229)

  @defaults = {
    :level => 2,
    :debug => false
  }
  
  class << self; attr_reader :defaults; end
  
  attr_reader :options
  
  def initialize(options = {})
    @options = Parser.defaults.merge(options)
  end
  
  def parse(input)
    @yydebug = @options[:debug] || ENV['DEBUG']
    scan(input)
    do_parse
  end
  
  def next_token
    @stack.shift
  end

  def on_error(tid, val, vstack)
    warn "failed to parse extended date time %s (%s) %s" % [val.inspect, token_to_str(tid) || '?', vstack.inspect]
  end

  def scan(input)
    @src = StringScanner.new(input)
    @stack = []
    tokenize
  end

  private

  def tokenize
    until @src.eos?
      case
      when @src.scan(/\(/)
        @stack << [:LP, @src.matched]
      when @src.scan(/\)/)
        @stack << [:RP, @src.matched]
      when @src.scan(/T/)
        @stack << [:T, @src.matched]
      when @src.scan(/Z/)
        @stack << [:Z, @src.matched]
      when @src.scan(/\?/)
        @stack << [:UNCERTAIN, @src.matched]
      when @src.scan(/~/)
        @stack << [:APPROXIMATE, @src.matched]
      when @src.scan(/open/i)
        @stack << [:OPEN, @src.matched]
      when @src.scan(/unkn?own/i) # matches 'unkown' typo too
        @stack << [:UNKNOWN, @src.matched]
      when @src.scan(/u/)
        @stack << [:UNSPECIFIED, @src.matched]
      when @src.scan(/x/i)
        @stack << [:X, @src.matched]
      when @src.scan(/y/)
        @stack << [:LONGYEAR, @src.matched]
      when @src.scan(/e/)
        @stack << [:E, @src.matched]
      when @src.scan(/\+/)
        @stack << [:PLUS, @src.matched]
      when @src.scan(/-/)
        @stack << [:MINUS, @src.matched]
      when @src.scan(/:/)
        @stack << [:COLON, @src.matched]
      when @src.scan(/\//)
        @stack << [:SLASH, @src.matched]
      when @src.scan(/\^\w+/)
        @stack << [:CARET, @src.matched[1..-1]]
      when @src.scan(/\d/)
        @stack << [['D', @src.matched].join.intern, @src.matched]
      else @src.scan(/./)
        @stack << [:UNMATCHED, @src.rest]
      end
    end
  
    @stack
  end


# -*- racc -*-
...end parser.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
    42,   119,   120,   121,   122,    12,    71,   -52,    30,    32,
    33,    34,    35,    36,    37,    38,    39,    40,    77,    78,
    44,    45,   139,    24,   163,    25,    46,    30,    32,    33,
    34,    35,    36,    37,    38,    39,    40,    92,    77,    78,
    76,   138,    30,    32,    33,    34,    35,    36,    37,    38,
    39,    40,    74,    88,    12,   143,    91,    30,    32,    33,
    34,    35,    36,    37,    38,    39,    40,    81,    69,    82,
    85,   106,    24,    99,   108,   107,    44,    45,    58,   149,
   148,    80,    32,    33,    34,    35,    36,    37,    38,    39,
    40,    30,    32,    33,    34,    35,    36,    37,    38,    39,
    40,    30,    32,    33,    34,    35,    36,    37,    38,    39,
    40,    30,    32,    33,    34,    35,    36,    37,    38,    39,
    40,    30,    32,    33,    34,    35,    36,    37,    38,    39,
    40,   170,    32,    33,    34,    35,    36,    37,    38,    39,
    40,   169,    32,    33,    34,    35,    36,    37,    38,    39,
    40,    30,    32,    33,    34,    35,    36,    37,    38,    39,
    40,    30,    32,    33,    34,    35,    36,    37,    38,    39,
    40,    30,    32,    33,    34,    35,    36,    37,    38,    39,
    40,    30,    32,    33,    34,    35,    36,    37,    38,    39,
    40,    30,    32,    33,    34,    35,    36,    37,    38,    39,
    40,    30,    32,    33,    34,    35,    36,    37,    38,    39,
    40,    30,    32,    33,    34,    35,    36,    37,    38,    39,
    40,    30,    32,    33,    34,    35,    36,    37,    38,    39,
    40,    30,    32,    33,    34,    35,    36,    37,    38,    39,
    40,    30,    32,    33,    34,    35,    36,    37,    38,    39,
    40,    30,    32,    33,    34,    35,    36,    37,    38,    39,
    40,    30,    32,    33,    34,    35,    36,    37,    38,    39,
    40,    30,    32,    33,    34,    35,    36,    37,    38,    39,
    40,   192,    32,    33,    34,    35,    36,    37,    38,    39,
    40,    30,    32,    33,    34,    35,    36,    37,    38,    39,
    40,   111,   112,   113,   114,   128,   129,   130,   131,   132,
   133,   116,    32,    33,    34,    35,    36,    37,    38,    39,
    40,   172,    32,    33,    34,    35,    36,    37,    38,    39,
    40,    32,    33,    34,    35,    36,    37,    38,    39,    40,
    32,    33,    34,    35,    36,    37,    38,    39,    40,    32,
    33,    34,    35,    36,    37,    38,    39,    40,    32,    33,
    34,    35,    36,    37,    38,    39,    40,    32,    33,    34,
    35,    36,    37,    38,    39,    40,    32,    33,    34,    35,
    36,    37,    38,    39,    40,   156,    69,    82,   158,   159,
   160,    81,    69,    82,   158,   159,   160,   189,    69,    82,
   158,   159,   160,   156,    69,    82,   158,   159,   160,   156,
    69,    82,   158,   159,   160,   124,   125,   126,   168,   167,
   111,   112,   113,   114,   110,    81,    69,    82,    85,   124,
   125,   126,    68,    69,    66,   153,   148,   134,   135,    87,
   162,   166,   104,   141,    61,   171,    56,    55,    54,   -53,
   176,   177,    48,    47,   140,   180,   181,   182,   109,   185,
   186,   187,   127,   118,   190,   191,    41,   193,   194 ]

racc_action_check = [
     5,    76,    76,    76,    76,     0,    44,     5,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    87,    87,
     5,     5,    90,     0,   118,     0,     5,    90,    90,    90,
    90,    90,    90,    90,    90,    90,    90,    53,    47,    47,
    47,    90,    53,    53,    53,    53,    53,    53,    53,    53,
    53,    53,    47,    50,    56,   102,    53,    56,    56,    56,
    56,    56,    56,    56,    56,    56,    56,    48,    48,    48,
    48,    63,    56,    56,    63,    63,    95,    95,    25,   107,
   107,    48,    25,    25,    25,    25,    25,    25,    25,    25,
    25,    52,    52,    52,    52,    52,    52,    52,    52,    52,
    52,   158,   158,   158,   158,   158,   158,   158,   158,   158,
   158,    69,    69,    69,    69,    69,    69,    69,    69,    69,
    69,   160,   160,   160,   160,   160,   160,   160,   160,   160,
   160,   153,   153,   153,   153,   153,   153,   153,   153,   153,
   153,   149,   149,   149,   149,   149,   149,   149,   149,   149,
   149,   145,   145,   145,   145,   145,   145,   145,   145,   145,
   145,    13,    13,    13,    13,    13,    13,    13,    13,    13,
    13,    12,    12,    12,    12,    12,    12,    12,    12,    12,
    12,   144,   144,   144,   144,   144,   144,   144,   144,   144,
   144,   136,   136,   136,   136,   136,   136,   136,   136,   136,
   136,   159,   159,   159,   159,   159,   159,   159,   159,   159,
   159,   164,   164,   164,   164,   164,   164,   164,   164,   164,
   164,   103,   103,   103,   103,   103,   103,   103,   103,   103,
   103,   165,   165,   165,   165,   165,   165,   165,   165,   165,
   165,    57,    57,    57,    57,    57,    57,    57,    57,    57,
    57,   101,   101,   101,   101,   101,   101,   101,   101,   101,
   101,    59,    59,    59,    59,    59,    59,    59,    59,    59,
    59,    93,    93,    93,    93,    93,    93,    93,    93,    93,
    93,   189,   189,   189,   189,   189,   189,   189,   189,   189,
   189,    89,    89,    89,    89,    89,    89,    89,    89,    89,
    89,    82,    82,    82,    82,    82,    82,    82,    82,    82,
    82,    68,    68,    68,    68,    68,    68,    68,    68,    68,
    68,   156,   156,   156,   156,   156,   156,   156,   156,   156,
   156,    58,    58,    58,    58,    58,    58,    58,    58,    58,
   143,   143,   143,   143,   143,   143,   143,   143,   143,    77,
    77,    77,    77,    77,    77,    77,    77,    77,   104,   104,
   104,   104,   104,   104,   104,   104,   104,    54,    54,    54,
    54,    54,    54,    54,    54,    54,    81,    81,    81,    81,
    81,    81,    81,    81,    81,   171,   171,   171,   171,   171,
   171,   181,   181,   181,   181,   181,   181,   182,   182,   182,
   182,   182,   182,   109,   109,   109,   109,   109,   109,   166,
   166,   166,   166,   166,   166,   148,   148,   148,   148,   148,
    66,    66,    66,    66,    66,    88,    88,    88,    88,    78,
    78,    78,    42,    42,    42,   108,   108,    85,    85,    49,
   110,   147,    60,    92,    41,   154,    23,    18,    17,    14,
   162,   163,    10,     9,    91,   167,   169,   170,    64,   176,
   177,   180,    80,    74,   185,   187,     1,   190,   193 ]

racc_action_pointer = [
    -2,   466,   nil,   nil,   nil,    -2,   nil,   nil,   nil,   446,
   445,   nil,   161,   151,   440,   nil,   nil,   444,   419,   nil,
   nil,   nil,   nil,   437,   nil,    71,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   444,   422,   nil,   -17,   nil,   nil,    28,    57,   432,
    46,   nil,    81,    32,   356,   nil,    47,   231,   320,   251,
   438,   nil,   nil,    68,   450,   nil,   410,   nil,   301,   101,
   nil,   nil,   nil,   nil,   439,   nil,   -10,   338,   419,   nil,
   438,   365,   291,   nil,   nil,   427,   nil,     8,   415,   281,
    17,   430,   438,   261,   nil,    54,   nil,   nil,   nil,   nil,
   nil,   241,    51,   211,   347,   nil,   nil,    69,   425,   393,
   432,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    17,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   181,   nil,   nil,   nil,
   nil,   nil,   nil,   329,   171,   141,   nil,   433,   405,   131,
   nil,   nil,   nil,   121,   437,   nil,   311,   nil,    91,   191,
   111,   nil,   440,   427,   201,   221,   399,   447,   nil,   448,
   449,   375,   nil,   nil,   nil,   nil,   449,   436,   nil,   nil,
   451,   381,   387,   nil,   nil,   456,   nil,   455,   nil,   271,
   457,   nil,   nil,   458,   nil ]

racc_action_default = [
  -125,  -125,    -1,    -2,    -3,    -4,    -5,    -6,    -7,    -8,
    -9,   -10,  -125,  -125,   -33,   -34,   -35,   -36,   -37,   -42,
   -43,   -44,   -45,  -125,   -54,  -125,   -66,   -67,   -68,   -69,
   -77,   -78,   -79,   -80,   -81,   -82,   -83,   -84,   -85,   -86,
   -87,  -125,  -125,   -38,   -39,   -40,   -74,  -125,  -125,    -8,
    -9,   -11,  -125,  -125,  -125,   -70,  -125,   -57,  -125,  -119,
  -125,   195,   -12,   -13,  -125,   -16,  -125,   -30,  -125,  -125,
  -101,   -41,   -27,   -28,  -125,   -61,  -125,  -125,  -125,   -29,
  -125,  -125,  -125,  -102,  -109,  -125,  -111,  -125,  -125,  -125,
  -125,  -125,  -125,   -71,  -123,   -52,   -51,   -53,   -55,   -56,
   -60,   -58,  -125,  -120,  -125,   -14,   -18,  -125,  -125,  -125,
  -125,   -96,   -97,   -98,   -99,   -94,  -100,   -95,   -48,   -62,
   -63,   -64,   -65,   -88,   -89,   -90,   -91,   -49,  -103,  -104,
  -105,  -106,  -107,  -108,  -110,  -112,  -125,   -26,   -46,   -75,
   -47,   -76,  -124,  -125,  -121,   -72,   -19,  -125,  -125,  -125,
   -92,   -20,   -21,  -125,  -125,   -31,  -125,  -113,  -125,  -125,
  -125,  -118,  -125,  -125,   -73,  -122,  -125,  -125,   -93,  -125,
  -125,  -125,  -117,  -114,  -115,  -116,  -125,  -125,   -59,   -23,
  -125,  -125,  -125,   -15,   -32,  -125,   -50,  -125,   -25,  -125,
  -125,   -24,   -22,  -125,   -17 ]

racc_goto_table = [
    13,    84,    59,   154,    60,    93,     5,    14,    23,    57,
   150,   150,    52,    53,   146,   152,   188,   188,   184,   183,
    65,   105,   151,    63,    62,    10,    67,    64,     9,    15,
    16,    94,    17,    18,    19,    59,    20,   102,    21,    22,
    51,    84,   101,    96,     6,   115,     4,    75,    26,    27,
    28,    29,    89,    90,   123,   145,    52,   100,   115,   103,
   179,     3,    95,    97,    98,     2,    70,     1,   nil,   117,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    94,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   136,
   137,   nil,   nil,   nil,   164,   nil,   nil,   nil,   nil,   nil,
   nil,   100,   nil,   144,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    94,   nil,   nil,   nil,   nil,   nil,   123,   nil,   nil,   nil,
   123,   nil,   nil,   115,   nil,   nil,   137,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   165,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   173,   174,
   175,   nil,   nil,   nil,   nil,   178,   115 ]

racc_goto_check = [
    23,    51,    42,    16,    49,    48,     5,    29,    39,    41,
    25,    25,    23,    23,    19,    19,    22,    22,    28,    17,
    18,    14,    20,    13,    12,    10,    27,    15,     9,    30,
    31,    42,    32,    33,    35,    42,    36,    49,    37,    38,
     7,    51,    41,    40,     6,    42,     4,    43,    44,    45,
    46,    47,    23,    23,    42,    48,    23,    23,    42,    23,
    16,     3,     5,    29,    39,     2,    50,     1,   nil,    23,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    42,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    23,
    23,   nil,   nil,   nil,    48,   nil,   nil,   nil,   nil,   nil,
   nil,    23,   nil,    23,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    42,   nil,   nil,   nil,   nil,   nil,    42,   nil,   nil,   nil,
    42,   nil,   nil,    42,   nil,   nil,    23,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    23,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    23,    23,
    23,   nil,   nil,   nil,   nil,    23,    42 ]

racc_goto_pointer = [
   nil,    67,    65,    61,    46,     6,    44,    28,   nil,    28,
    25,   nil,   -18,   -19,   -42,   -15,  -106,  -152,   -22,   -93,
   -86,   nil,  -165,     0,   nil,   -97,   nil,   -16,  -153,     7,
    29,    30,    32,    33,   nil,    34,    36,    38,    39,     8,
   -13,   -16,   -23,     0,    48,    49,    50,    51,   -49,   -21,
    24,   -47,   nil ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   nil,   nil,     7,     8,    49,
    50,    11,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   147,   161,   142,    73,    72,    79,   nil,   155,   nil,
   nil,   nil,   nil,   nil,    43,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    31,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    83,   157,    86 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 31, :_reduce_none,
  1, 31, :_reduce_none,
  1, 31, :_reduce_none,
  1, 32, :_reduce_none,
  1, 32, :_reduce_none,
  1, 35, :_reduce_none,
  1, 35, :_reduce_none,
  1, 37, :_reduce_8,
  1, 37, :_reduce_9,
  1, 37, :_reduce_10,
  2, 38, :_reduce_11,
  3, 36, :_reduce_12,
  1, 42, :_reduce_none,
  2, 42, :_reduce_14,
  5, 43, :_reduce_15,
  1, 43, :_reduce_none,
  8, 48, :_reduce_17,
  1, 44, :_reduce_18,
  2, 44, :_reduce_19,
  2, 44, :_reduce_20,
  1, 50, :_reduce_none,
  5, 50, :_reduce_22,
  3, 49, :_reduce_23,
  5, 49, :_reduce_24,
  4, 49, :_reduce_25,
  4, 39, :_reduce_26,
  1, 54, :_reduce_none,
  3, 40, :_reduce_28,
  3, 41, :_reduce_29,
  1, 45, :_reduce_none,
  1, 46, :_reduce_none,
  1, 47, :_reduce_none,
  1, 33, :_reduce_none,
  1, 33, :_reduce_none,
  1, 33, :_reduce_none,
  1, 33, :_reduce_none,
  1, 33, :_reduce_none,
  2, 59, :_reduce_38,
  1, 64, :_reduce_39,
  1, 64, :_reduce_40,
  2, 64, :_reduce_41,
  1, 60, :_reduce_none,
  1, 60, :_reduce_none,
  1, 60, :_reduce_none,
  1, 60, :_reduce_none,
  4, 65, :_reduce_46,
  4, 65, :_reduce_47,
  4, 66, :_reduce_48,
  4, 67, :_reduce_49,
  7, 68, :_reduce_50,
  3, 61, :_reduce_51,
  1, 69, :_reduce_none,
  1, 69, :_reduce_none,
  1, 69, :_reduce_54,
  1, 70, :_reduce_none,
  1, 70, :_reduce_56,
  2, 62, :_reduce_57,
  3, 62, :_reduce_58,
  5, 71, :_reduce_59,
  2, 71, :_reduce_60,
  3, 63, :_reduce_61,
  2, 73, :_reduce_62,
  2, 73, :_reduce_63,
  2, 73, :_reduce_64,
  2, 73, :_reduce_65,
  1, 34, :_reduce_none,
  1, 34, :_reduce_none,
  1, 34, :_reduce_none,
  1, 34, :_reduce_none,
  2, 74, :_reduce_70,
  3, 77, :_reduce_71,
  4, 77, :_reduce_72,
  5, 77, :_reduce_73,
  2, 76, :_reduce_74,
  4, 75, :_reduce_75,
  4, 75, :_reduce_76,
  1, 53, :_reduce_77,
  1, 53, :_reduce_none,
  1, 72, :_reduce_79,
  1, 72, :_reduce_80,
  1, 72, :_reduce_81,
  1, 72, :_reduce_82,
  1, 72, :_reduce_83,
  1, 72, :_reduce_84,
  1, 72, :_reduce_85,
  1, 72, :_reduce_86,
  1, 72, :_reduce_87,
  2, 55, :_reduce_88,
  2, 55, :_reduce_89,
  2, 55, :_reduce_90,
  2, 55, :_reduce_91,
  1, 51, :_reduce_none,
  2, 51, :_reduce_93,
  2, 80, :_reduce_94,
  2, 80, :_reduce_95,
  2, 80, :_reduce_96,
  2, 80, :_reduce_97,
  2, 80, :_reduce_98,
  2, 80, :_reduce_99,
  2, 57, :_reduce_100,
  1, 57, :_reduce_none,
  1, 81, :_reduce_none,
  2, 81, :_reduce_103,
  2, 81, :_reduce_104,
  2, 81, :_reduce_105,
  2, 81, :_reduce_106,
  2, 81, :_reduce_107,
  2, 81, :_reduce_108,
  1, 82, :_reduce_none,
  2, 82, :_reduce_110,
  1, 56, :_reduce_none,
  2, 56, :_reduce_112,
  1, 52, :_reduce_none,
  2, 52, :_reduce_114,
  2, 52, :_reduce_115,
  2, 52, :_reduce_116,
  2, 58, :_reduce_117,
  1, 58, :_reduce_none,
  1, 79, :_reduce_119,
  2, 79, :_reduce_120,
  3, 79, :_reduce_121,
  4, 79, :_reduce_122,
  1, 78, :_reduce_123,
  2, 78, :_reduce_124 ]

racc_reduce_n = 125

racc_shift_n = 195

racc_token_table = {
  false => 0,
  :error => 1,
  :T => 2,
  :Z => 3,
  :E => 4,
  :X => 5,
  :PLUS => 6,
  :MINUS => 7,
  :COLON => 8,
  :SLASH => 9,
  :D0 => 10,
  :D1 => 11,
  :D2 => 12,
  :D3 => 13,
  :D4 => 14,
  :D5 => 15,
  :D6 => 16,
  :D7 => 17,
  :D8 => 18,
  :D9 => 19,
  :LP => 20,
  :RP => 21,
  :UNCERTAIN => 22,
  :APPROXIMATE => 23,
  :UNSPECIFIED => 24,
  :UNKNOWN => 25,
  :OPEN => 26,
  :LONGYEAR => 27,
  :CARET => 28,
  :UNMATCHED => 29 }

racc_nt_base = 30

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "T",
  "Z",
  "E",
  "X",
  "PLUS",
  "MINUS",
  "COLON",
  "SLASH",
  "D0",
  "D1",
  "D2",
  "D3",
  "D4",
  "D5",
  "D6",
  "D7",
  "D8",
  "D9",
  "LP",
  "RP",
  "UNCERTAIN",
  "APPROXIMATE",
  "UNSPECIFIED",
  "UNKNOWN",
  "OPEN",
  "LONGYEAR",
  "CARET",
  "UNMATCHED",
  "$start",
  "edtf",
  "level_0_expression",
  "level_1_expression",
  "level_2_expression",
  "date",
  "date_time",
  "positive_date",
  "negative_date",
  "year",
  "year_month",
  "year_month_day",
  "time",
  "base_time",
  "zone_offset",
  "hour",
  "minute",
  "second",
  "midnight",
  "zone_offset_hour",
  "positive_zone_offset",
  "d01_13",
  "d01_59",
  "digit",
  "month",
  "d01_12",
  "d01_31",
  "d00_23",
  "d00_59",
  "uncertain_or_approximate_date",
  "unspecified",
  "level_1_interval",
  "long_year_simple",
  "season",
  "uncertain_or_approximate",
  "unspecified_year",
  "unspecified_month",
  "unspecified_day",
  "unspecified_day_and_month",
  "level_1_start",
  "level_1_end",
  "long_year",
  "positive_digit",
  "season_number",
  "season_qualified",
  "masked_precision",
  "date_and_calendar",
  "long_year_scientific",
  "integer",
  "int1_4",
  "d01_23",
  "d01_29",
  "d01_30" ]

Racc_debug_parser = true

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

# reduce 2 omitted

# reduce 3 omitted

# reduce 4 omitted

# reduce 5 omitted

# reduce 6 omitted

# reduce 7 omitted

module_eval(<<'.,.,', 'parser.y', 26)
  def _reduce_8(val, _values, result)
     result = Date.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 27)
  def _reduce_9(val, _values, result)
     result = Date.new(*val.flatten) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 28)
  def _reduce_10(val, _values, result)
     result = Date.new(*val.flatten) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 30)
  def _reduce_11(val, _values, result)
     result = Date.new(-1 * val[1].year, val[1].month, val[1].day) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 33)
  def _reduce_12(val, _values, result)
     result = DateTime.new(val[0].year, val[0].month, val[0].day, *val[2]) 
    result
  end
.,.,

# reduce 13 omitted

module_eval(<<'.,.,', 'parser.y', 36)
  def _reduce_14(val, _values, result)
     result = val.flatten 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 38)
  def _reduce_15(val, _values, result)
     result = [val[0], val[2], val[4]] 
    result
  end
.,.,

# reduce 16 omitted

module_eval(<<'.,.,', 'parser.y', 41)
  def _reduce_17(val, _values, result)
     result = [24, 0, 0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 43)
  def _reduce_18(val, _values, result)
     result = 0 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 44)
  def _reduce_19(val, _values, result)
     result = -1 * val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 45)
  def _reduce_20(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 21 omitted

module_eval(<<'.,.,', 'parser.y', 48)
  def _reduce_22(val, _values, result)
     result = 0 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 51)
  def _reduce_23(val, _values, result)
     result = Rational(val[0] * 60 + val[2], 1440) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 52)
  def _reduce_24(val, _values, result)
     result = Rational(840, 1440) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 53)
  def _reduce_25(val, _values, result)
     result = Rational(val[3], 1440) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 55)
  def _reduce_26(val, _values, result)
     result = val.zip([1000,100,10,1]).reduce(0) { |s,(a,b)| s += a * b } 
    result
  end
.,.,

# reduce 27 omitted

module_eval(<<'.,.,', 'parser.y', 59)
  def _reduce_28(val, _values, result)
     result = [val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 65)
  def _reduce_29(val, _values, result)
     result = val[0] << val[2]; raise ArgumentError, "invalid date (invalid days #{result[2]} for month #{result[1]})" if result[2] > 31 || (result[2] > 30 && [2,4,6,9,11].include?(result[1])) || (result[2] > 29 && result[1] == 2) 
    result
  end
.,.,

# reduce 30 omitted

# reduce 31 omitted

# reduce 32 omitted

# reduce 33 omitted

# reduce 34 omitted

# reduce 35 omitted

# reduce 36 omitted

# reduce 37 omitted

module_eval(<<'.,.,', 'parser.y', 85)
  def _reduce_38(val, _values, result)
     result = val[0]; val[1].each { |m| result.send(m) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 87)
  def _reduce_39(val, _values, result)
     result = [:uncertain!] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 88)
  def _reduce_40(val, _values, result)
     result = [:approximate!] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 89)
  def _reduce_41(val, _values, result)
     result = [:uncertain!, :approximate!] 
    result
  end
.,.,

# reduce 42 omitted

# reduce 43 omitted

# reduce 44 omitted

# reduce 45 omitted

module_eval(<<'.,.,', 'parser.y', 97)
  def _reduce_46(val, _values, result)
     result = Date.new(val[0,3].zip([1000,100,10]).reduce(0) { |s,(a,b)| s += a * b }); result.unspecified.year[3] = true 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 98)
  def _reduce_47(val, _values, result)
     result = Date.new(val[0,2].zip([1000,100]).reduce(0) { |s,(a,b)| s += a * b }); result.unspecified.year[2,2] = true 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 100)
  def _reduce_48(val, _values, result)
     result = Date.new(val[0]).unspecified!(:month) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 102)
  def _reduce_49(val, _values, result)
     result = Date.new(*val[0]).unspecified!(:day) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 104)
  def _reduce_50(val, _values, result)
     result = Date.new(val[0]).unspecified!([:day,:month]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 107)
  def _reduce_51(val, _values, result)
     result = Interval.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 52 omitted

# reduce 53 omitted

module_eval(<<'.,.,', 'parser.y', 111)
  def _reduce_54(val, _values, result)
     result = :unknown 
    result
  end
.,.,

# reduce 55 omitted

module_eval(<<'.,.,', 'parser.y', 114)
  def _reduce_56(val, _values, result)
     result = :open 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 117)
  def _reduce_57(val, _values, result)
     result = Date.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 118)
  def _reduce_58(val, _values, result)
     result = Date.new(-1 * val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 120)
  def _reduce_59(val, _values, result)
     result = val.zip([10000,1000,100,10,1]).reduce(0) { |s,(a,b)| s += a * b } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 121)
  def _reduce_60(val, _values, result)
     result = 10 * val[0] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 124)
  def _reduce_61(val, _values, result)
     result = Date.new(val[0]); result.season = val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 126)
  def _reduce_62(val, _values, result)
     result = 21 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 127)
  def _reduce_63(val, _values, result)
     result = 22 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 128)
  def _reduce_64(val, _values, result)
     result = 23 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 129)
  def _reduce_65(val, _values, result)
     result = 24 
    result
  end
.,.,

# reduce 66 omitted

# reduce 67 omitted

# reduce 68 omitted

# reduce 69 omitted

module_eval(<<'.,.,', 'parser.y', 145)
  def _reduce_70(val, _values, result)
     result = val[0]; result.qualifier = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 148)
  def _reduce_71(val, _values, result)
     result = Date.new(val[0].year * 10 ** val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 149)
  def _reduce_72(val, _values, result)
     result = Date.new(val[1] * 10 ** val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 150)
  def _reduce_73(val, _values, result)
     result = Date.new(-1 * val[2] * 10 ** val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 153)
  def _reduce_74(val, _values, result)
     result = val[0]; result.calendar = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 156)
  def _reduce_75(val, _values, result)
     d = val[0,3].zip([1000,100,10]).reduce(0) { |s,(a,b)| s += a * b }; result = Date.new(d) ... Date.new(d+10) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 157)
  def _reduce_76(val, _values, result)
     d = val[0,2].zip([1000,100]).reduce(0) { |s,(a,b)| s += a * b }; result = Date.new(d) ... Date.new(d+100) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 161)
  def _reduce_77(val, _values, result)
     result = 0 
    result
  end
.,.,

# reduce 78 omitted

module_eval(<<'.,.,', 'parser.y', 164)
  def _reduce_79(val, _values, result)
     result = 1 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 165)
  def _reduce_80(val, _values, result)
     result = 2 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 166)
  def _reduce_81(val, _values, result)
     result = 3 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 167)
  def _reduce_82(val, _values, result)
     result = 4 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 168)
  def _reduce_83(val, _values, result)
     result = 5 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 169)
  def _reduce_84(val, _values, result)
     result = 6 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 170)
  def _reduce_85(val, _values, result)
     result = 7 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 171)
  def _reduce_86(val, _values, result)
     result = 8 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 172)
  def _reduce_87(val, _values, result)
     result = 9 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 174)
  def _reduce_88(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 175)
  def _reduce_89(val, _values, result)
     result = 10 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 176)
  def _reduce_90(val, _values, result)
     result = 11 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 177)
  def _reduce_91(val, _values, result)
     result = 12 
    result
  end
.,.,

# reduce 92 omitted

module_eval(<<'.,.,', 'parser.y', 180)
  def _reduce_93(val, _values, result)
     result = 13 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 182)
  def _reduce_94(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 183)
  def _reduce_95(val, _values, result)
     result = 10 + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 184)
  def _reduce_96(val, _values, result)
     result = 20 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 185)
  def _reduce_97(val, _values, result)
     result = 21 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 186)
  def _reduce_98(val, _values, result)
     result = 22 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 187)
  def _reduce_99(val, _values, result)
     result = 23 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 189)
  def _reduce_100(val, _values, result)
     result = 0  
    result
  end
.,.,

# reduce 101 omitted

# reduce 102 omitted

module_eval(<<'.,.,', 'parser.y', 193)
  def _reduce_103(val, _values, result)
     result = 24 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 194)
  def _reduce_104(val, _values, result)
     result = 25 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 195)
  def _reduce_105(val, _values, result)
     result = 26 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 196)
  def _reduce_106(val, _values, result)
     result = 27 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 197)
  def _reduce_107(val, _values, result)
     result = 28 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 198)
  def _reduce_108(val, _values, result)
     result = 29 
    result
  end
.,.,

# reduce 109 omitted

module_eval(<<'.,.,', 'parser.y', 201)
  def _reduce_110(val, _values, result)
     result = 30 
    result
  end
.,.,

# reduce 111 omitted

module_eval(<<'.,.,', 'parser.y', 204)
  def _reduce_112(val, _values, result)
     result = 31 
    result
  end
.,.,

# reduce 113 omitted

module_eval(<<'.,.,', 'parser.y', 207)
  def _reduce_114(val, _values, result)
     result = 30 + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 208)
  def _reduce_115(val, _values, result)
     result = 40 + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 209)
  def _reduce_116(val, _values, result)
     result = 50 + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 211)
  def _reduce_117(val, _values, result)
     result = 0 
    result
  end
.,.,

# reduce 118 omitted

module_eval(<<'.,.,', 'parser.y', 214)
  def _reduce_119(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 215)
  def _reduce_120(val, _values, result)
     result = 10 * val[0] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 216)
  def _reduce_121(val, _values, result)
     result = val.zip([100,10,1]).reduce(0) { |s,(a,b)| s += a * b } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 217)
  def _reduce_122(val, _values, result)
     result = val.zip([1000,100,10,1]).reduce(0) { |s,(a,b)| s += a * b } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 219)
  def _reduce_123(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 220)
  def _reduce_124(val, _values, result)
     result = 10 * val[0] + val[1] 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module EDTF
