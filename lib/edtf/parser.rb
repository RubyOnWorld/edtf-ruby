#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.6.0
# from Racc grammar file "".
#

require 'racc/parser.rb'

require 'strscan'

module EDTF
  class Parser < Racc::Parser

module_eval(<<'...end parser.y/module_eval...', 'parser.y', 532)

  @defaults = {
    :level => 2,
    :debug => false
  }.freeze

  class << self; attr_reader :defaults; end

  attr_reader :options

  def initialize(options = {})
    @options = Parser.defaults.merge(options)
  end

  def debug?
    !!(options[:debug] || ENV['DEBUG'])
  end

  def parse(input)
    parse!(input)
  rescue => e
    warn e.message if debug?
    nil
  end

  def parse!(input)
    @yydebug = debug?
    @src = StringScanner.new(input)
    do_parse
  end

  def on_error(tid, value, stack)
    raise ArgumentError,
      "failed to parse date: unexpected '#{value}' at #{stack.inspect}"
  end

  def apply_uncertainty(date, uncertainty, scope = nil)
    uncertainty.each do |u|
      scope.nil? ? date.send(u) : date.send(u, scope)
    end
    date
  end

  alias uoa apply_uncertainty

  def next_token
    case
    when @src.eos?
      nil
    # when @src.scan(/\s+/)
      # ignore whitespace
    when @src.scan(/\(/)
      ['(', @src.matched]
    # when @src.scan(/\)\?~-/)
    #   [:PUA, [:uncertain!, :approximate!]]
    # when @src.scan(/\)\?-/)
    #   [:PUA, [:uncertain!]]
    # when @src.scan(/\)~-/)
    #   [:PUA, [:approximate!]]
    when @src.scan(/\)/)
      [')', @src.matched]
    when @src.scan(/\[/)
      ['[', @src.matched]
    when @src.scan(/\]/)
      [']', @src.matched]
    when @src.scan(/\{/)
      ['{', @src.matched]
    when @src.scan(/\}/)
      ['}', @src.matched]
    when @src.scan(/T/)
      [:T, @src.matched]
    when @src.scan(/Z/)
      [:Z, @src.matched]
    when @src.scan(/\?~/)
      [:UA, [:uncertain!, :approximate!]]
    when @src.scan(/%/)
      [:UA, [:uncertain!, :approximate!]]
    when @src.scan(/\?/)
      [:UA, [:uncertain!]]
    when @src.scan(/~/)
      [:UA, [:approximate!]]
    when @src.scan(/open/i)
      [:OPEN, :open]
    when @src.scan(/unkn?own/i) # matches 'unkown' typo too
      [:UNKNOWN, :unknown]
    when @src.scan(/u/)
      [:U, @src.matched]
    when @src.scan(/X/)
      [:X, @src.matched]
    when @src.scan(/x/)
      [:x, @src.matched]
    when @src.scan(/y/i)
      [:LONGYEAR, @src.matched]
    when @src.scan(/e/i)
      [:E, @src.matched]
    when @src.scan(/\+/)
      ['+', @src.matched]
    when @src.scan(/-\(/)
      ['-(', @src.matched]
    when @src.scan(/-/)
      ['-', @src.matched]
    when @src.scan(/:/)
      [':', @src.matched]
    when @src.scan(/\//)
      ['/', @src.matched]
    when @src.scan(/\s*\.\.\s*/)
      [:DOTS, '..']
    when @src.scan(/\s*,\s*/)
      [',', ',']
    when @src.scan(/\^\w+/)
      ['^', @src.matched[1..-1]]
    when @src.scan(/\d/)
      [@src.matched, @src.matched.to_i]
    else @src.scan(/./)
      [:UNMATCHED, @src.rest]
    end
  end


# -*- racc -*-
...end parser.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
    21,    63,    20,    36,   129,    37,    68,   130,    62,   -67,
   191,    54,    56,    51,    11,   -68,    53,   173,    55,    69,
    44,   -65,    45,    64,    68,    47,   192,   193,    57,    58,
    59,    60,    61,   146,   147,   145,    66,    69,    75,    76,
    77,   146,    65,   145,    54,    56,    51,   109,    78,    53,
    79,    55,    54,    56,    51,    67,    80,    53,    81,    55,
   110,    57,    58,    59,    60,    61,   234,   235,   233,    57,
    58,    59,    60,    61,   234,   155,   233,    54,    56,    51,
   111,   -84,    53,   -85,    55,    54,    56,    51,   129,   -86,
    53,   130,    55,   112,    57,    58,    59,    60,    61,    36,
   165,   113,    57,    58,    59,    60,    61,    54,    56,    51,
    11,   102,    53,   150,    55,    54,    56,    51,    11,   151,
    53,    47,    55,   170,    57,    58,    59,    60,    61,    47,
   174,   175,    57,    58,    59,    60,    61,   102,   176,   185,
   177,    54,    56,    51,    11,   181,    53,   184,    55,    54,
    56,    51,    69,   194,    53,    47,    55,   203,    57,    58,
    59,    60,    61,   204,   205,   207,    57,    58,    59,    60,
    61,    54,    56,    51,   172,    66,    53,   219,    55,    54,
    56,   171,    83,   220,    53,   221,    55,   230,    57,    58,
    59,    60,    61,   236,    67,   237,    57,    58,    59,    60,
    61,    54,    56,    51,   104,   238,    53,   240,    55,    54,
    56,    51,   217,   241,    53,   242,    55,   243,    57,    58,
    59,    60,    61,   153,   216,   218,    57,    58,    59,    60,
    61,    54,    56,   244,   129,   245,    53,   130,    55,    54,
    56,    51,   268,   247,    53,   261,    55,   262,    57,    58,
    59,    60,    61,   264,   267,   269,    57,    58,    59,    60,
    61,    54,    56,   207,   129,   207,    53,   130,    55,    54,
    56,    51,   129,   271,    53,   130,    55,   288,    57,    58,
    59,    60,    61,   289,   290,   291,    57,    58,    59,    60,
    61,    54,    56,    51,   104,   294,    53,   297,    55,    54,
    56,    51,   228,   300,    53,   229,    55,   303,    57,    58,
    59,    60,    61,   304,   261,   262,    57,    58,    59,    60,
    61,    54,    56,    51,   129,   305,    53,   130,    55,    54,
    56,   201,   275,   219,    53,   274,    55,   308,    57,    58,
    59,    60,    61,   311,   312,   317,    57,    58,    59,    60,
    61,    54,    56,    51,   279,    66,    53,   274,    55,    54,
    56,   183,   129,   322,    53,   130,    55,   328,    57,    58,
    59,    60,    61,   329,    67,   330,    57,    58,    59,    60,
    61,    54,    56,   333,   337,   338,    53,   340,    55,   198,
   222,   196,   341,   343,   197,   344,   199,   345,    57,    58,
    59,    60,    61,   348,   349,   350,   223,   224,   225,   226,
   227,    54,    56,    51,   207,   352,    53,   353,    55,    54,
    56,    51,   354,   355,    53,   323,    55,   325,    57,    58,
    59,    60,    61,   356,   357,   358,    57,    58,    59,    60,
    61,    54,    56,    51,   361,    66,    53,   362,    55,    54,
    56,   246,   363,   364,    53,   366,    55,   367,    57,    58,
    59,    60,    61,   368,    67,   369,    57,    58,    59,    60,
    61,    54,    56,    51,   104,   nil,    53,   nil,    55,    54,
    56,    51,   104,   nil,    53,   nil,    55,   nil,    57,    58,
    59,    60,    61,   nil,   nil,   nil,    57,    58,    59,    60,
    61,    54,    56,    51,   104,   nil,    53,   nil,    55,    54,
    56,    51,    11,   nil,    53,   nil,    55,   nil,    57,    58,
    59,    60,    61,    47,   nil,   nil,    57,    58,    59,    60,
    61,    54,    56,    51,    11,   nil,    53,   nil,    55,    54,
    56,    51,   nil,   nil,    53,    47,    55,   nil,    57,    58,
    59,    60,    61,   nil,   nil,   nil,    57,    58,    59,    60,
    61,    54,    56,   nil,   nil,   nil,    53,   nil,    55,    54,
    56,    51,   nil,   nil,    53,   nil,    55,   nil,    57,    58,
    59,    60,    61,   nil,   nil,   nil,    57,    58,    59,    60,
    61,    54,    56,    51,   nil,   nil,    53,   nil,    55,    54,
    56,    51,   nil,   nil,    53,   nil,    55,   nil,    57,    58,
    59,    60,    61,   nil,   nil,   nil,    57,    58,    59,    60,
    61,    54,    56,   315,   nil,   nil,    53,   nil,    55,    54,
    56,   316,   nil,   nil,    53,   nil,    55,   nil,    57,    58,
    59,    60,    61,   nil,   nil,   nil,    57,    58,    59,    60,
    61,    54,    56,   318,   nil,   nil,    53,   nil,    55,    54,
    56,    51,   nil,   nil,    53,   nil,    55,   nil,    57,    58,
    59,    60,    61,   nil,   nil,   nil,    57,    58,    59,    60,
    61,    54,    56,    51,   nil,   nil,    53,   nil,    55,    54,
    56,    51,   nil,   nil,    53,   nil,    55,   nil,    57,    58,
    59,    60,    61,   nil,   nil,   nil,    57,    58,    59,    60,
    61,    54,    56,    51,   nil,   nil,    53,   nil,    55,    54,
    56,    51,   nil,   nil,    53,   nil,    55,   nil,    57,    58,
    59,    60,    61,   nil,   nil,   nil,    57,    58,    59,    60,
    61,    54,    56,    51,    11,   nil,    53,   nil,    55,    54,
    56,   365,   nil,   nil,    53,    47,    55,   nil,    57,    58,
    59,    60,    61,   135,   299,   134,    57,    58,    59,    60,
    61,   nil,   325,   335,   137,   137,   136,   136,   nil,   121,
   121,   140,   140,   137,   137,   136,   136,   nil,   121,   121,
   140,   140,   137,   285,   282,   nil,   nil,   121,   nil,   284,
   137,   285,   282,   209,   211,   121,   nil,   284,   208,   286,
   210,   137,   285,   282,   nil,   nil,   121,   286,   284,   137,
   285,   136,   nil,   nil,   121,   nil,   284,   126,   286,   125,
   137,   285,   360,   nil,   nil,   121,   286,   284,   128,   251,
   129,   250,   296,   130,   126,   nil,   125,   286,   nil,   nil,
   323,   137,   129,   136,   332,   130,   121,   129,   140,   137,
   130,   136,   nil,   137,   121,   136,   140,   137,   121,   136,
   140,   137,   121,   136,   140,   137,   121,   136,   140,   nil,
   121,   nil,   140,   198,   195,   196,   nil,   137,   197,   136,
   199,   137,   121,   136,   140,   137,   121,   136,   140,   137,
   121,   136,   140,   137,   121,   136,   140,   137,   121,   136,
   140,   nil,   121,   nil,   140,   215,   313,   213,   nil,   137,
   214,   136,   314,   118,   121,   120,   140,   215,   121,   213,
   nil,   nil,   214 ]

racc_action_check = [
     0,     5,     0,     0,    67,     0,     8,    67,     1,    15,
   115,     0,     0,     0,     0,    16,     0,    87,     0,     8,
     0,     5,     0,     5,    87,     0,   115,   115,     0,     0,
     0,     0,     0,    74,    74,    74,     7,    87,    18,    19,
    20,   143,     7,   143,    74,    74,    74,    48,    21,    74,
    22,    74,   143,   143,   143,     7,    27,   143,    32,   143,
    48,    74,    74,    74,    74,    74,   144,   144,   144,   143,
   143,   143,   143,   143,   231,    80,   231,   144,   144,   144,
    49,    33,   144,    34,   144,   231,   231,   231,    80,    35,
   231,    80,   231,    49,   144,   144,   144,   144,   144,    81,
    81,    62,   231,   231,   231,   231,   231,    81,    81,    81,
    81,    44,    81,    77,    81,    44,    44,    44,    44,    78,
    44,    81,    44,    85,    81,    81,    81,    81,    81,    44,
    88,    91,    44,    44,    44,    44,    44,    45,    92,   108,
    93,    45,    45,    45,    45,   103,    45,   107,    45,    11,
    11,    11,   108,   116,    11,    45,    11,   124,    45,    45,
    45,    45,    45,   125,   126,   127,    11,    11,    11,    11,
    11,    12,    12,    12,    86,    86,    12,   133,    12,    37,
    37,    86,    37,   134,    37,   135,    37,   142,    12,    12,
    12,    12,    12,   145,    86,   146,    37,    37,    37,    37,
    37,    47,    47,    47,    47,   147,    47,   150,    47,    71,
    71,    71,   131,   151,    71,   152,    71,   153,    47,    47,
    47,    47,    47,    79,   131,   131,    71,    71,    71,    71,
    71,    75,    75,   154,    79,   155,    75,    79,    75,    82,
    82,    82,   187,   168,    82,   178,    82,   179,    75,    75,
    75,    75,    75,   184,   187,   187,    82,    82,    82,    82,
    82,    83,    83,   186,   109,   188,    83,   109,    83,    84,
    84,    84,   110,   189,    84,   110,    84,   195,    83,    83,
    83,    83,    83,   204,   205,   216,    84,    84,    84,    84,
    84,   102,   102,   102,   102,   230,   102,   243,   102,   104,
   104,   104,   140,   245,   104,   140,   104,   250,   102,   102,
   102,   102,   102,   251,   253,   255,   104,   104,   104,   104,
   104,   105,   105,   105,   183,   257,   105,   183,   105,   120,
   120,   120,   192,   265,   120,   192,   120,   267,   105,   105,
   105,   105,   105,   271,   273,   280,   120,   120,   120,   120,
   120,   121,   121,   121,   193,   106,   121,   193,   121,   129,
   129,   106,   261,   288,   129,   261,   129,   292,   121,   121,
   121,   121,   121,   293,   106,   296,   129,   129,   129,   129,
   129,   136,   136,   299,   303,   304,   136,   309,   136,   137,
   137,   137,   310,   313,   137,   315,   137,   316,   136,   136,
   136,   136,   136,   322,   323,   325,   137,   137,   137,   137,
   137,   148,   148,   148,   327,   328,   148,   329,   148,   167,
   167,   167,   332,   335,   167,   337,   167,   338,   148,   148,
   148,   148,   148,   340,   341,   343,   167,   167,   167,   167,
   167,   169,   169,   169,   348,   156,   169,   353,   169,   170,
   170,   156,   357,   358,   170,   361,   170,   362,   169,   169,
   169,   169,   169,   363,   156,   366,   170,   170,   170,   170,
   170,   172,   172,   172,   172,   nil,   172,   nil,   172,   173,
   173,   173,   173,   nil,   173,   nil,   173,   nil,   172,   172,
   172,   172,   172,   nil,   nil,   nil,   173,   173,   173,   173,
   173,   174,   174,   174,   174,   nil,   174,   nil,   174,   176,
   176,   176,   176,   nil,   176,   nil,   176,   nil,   174,   174,
   174,   174,   174,   176,   nil,   nil,   176,   176,   176,   176,
   176,   177,   177,   177,   177,   nil,   177,   nil,   177,   182,
   182,   182,   nil,   nil,   182,   177,   182,   nil,   177,   177,
   177,   177,   177,   nil,   nil,   nil,   182,   182,   182,   182,
   182,   247,   247,   nil,   nil,   nil,   247,   nil,   247,   248,
   248,   248,   nil,   nil,   248,   nil,   248,   nil,   247,   247,
   247,   247,   247,   nil,   nil,   nil,   248,   248,   248,   248,
   248,   249,   249,   249,   nil,   nil,   249,   nil,   249,   263,
   263,   263,   nil,   nil,   263,   nil,   263,   nil,   249,   249,
   249,   249,   249,   nil,   nil,   nil,   263,   263,   263,   263,
   263,   275,   275,   275,   nil,   nil,   275,   nil,   275,   279,
   279,   279,   nil,   nil,   279,   nil,   279,   nil,   275,   275,
   275,   275,   275,   nil,   nil,   nil,   279,   279,   279,   279,
   279,   282,   282,   282,   nil,   nil,   282,   nil,   282,   284,
   284,   284,   nil,   nil,   284,   nil,   284,   nil,   282,   282,
   282,   282,   282,   nil,   nil,   nil,   284,   284,   284,   284,
   284,   285,   285,   285,   nil,   nil,   285,   nil,   285,   286,
   286,   286,   nil,   nil,   286,   nil,   286,   nil,   285,   285,
   285,   285,   285,   nil,   nil,   nil,   286,   286,   286,   286,
   286,   301,   301,   301,   nil,   nil,   301,   nil,   301,   302,
   302,   302,   nil,   nil,   302,   nil,   302,   nil,   301,   301,
   301,   301,   301,   nil,   nil,   nil,   302,   302,   302,   302,
   302,   305,   305,   305,   305,   nil,   305,   nil,   305,   360,
   360,   360,   nil,   nil,   360,   305,   360,   nil,   305,   305,
   305,   305,   305,    68,   244,    68,   360,   360,   360,   360,
   360,   nil,   290,   300,    68,   244,    68,   244,   nil,    68,
   244,    68,   244,   290,   300,   290,   300,   nil,   290,   300,
   290,   300,   194,   194,   194,   nil,   nil,   194,   nil,   194,
   312,   312,   312,   128,   128,   312,   nil,   312,   128,   194,
   128,   317,   317,   317,   nil,   nil,   317,   312,   317,   344,
   344,   344,   nil,   nil,   344,   nil,   344,    65,   317,    65,
   345,   345,   345,   nil,   nil,   345,   344,   345,    65,   171,
    65,   171,   242,    65,   246,   nil,   246,   345,   nil,   nil,
   289,   242,   171,   242,   297,   171,   242,   246,   242,   289,
   246,   289,   nil,   297,   289,   297,   289,    69,   297,    69,
   297,   111,    69,   111,    69,   112,   111,   112,   111,   nil,
   112,   nil,   112,   118,   118,   118,   nil,   185,   118,   185,
   118,   217,   185,   217,   185,   218,   217,   218,   217,   262,
   218,   262,   218,   268,   262,   268,   262,   269,   268,   269,
   268,   nil,   269,   nil,   269,   274,   274,   274,   nil,   291,
   274,   291,   274,    63,   291,    63,   291,   130,    63,   130,
   nil,   nil,   130 ]

racc_action_pointer = [
    -5,     8,   nil,   nil,   nil,    -1,   nil,    23,   -13,   nil,
   nil,   133,   155,   nil,   nil,   -13,    -7,   nil,    34,    15,
    33,    43,    31,   nil,   nil,   nil,   nil,    37,   nil,   nil,
   nil,   nil,    36,    81,    83,    89,   nil,   163,   nil,   nil,
   nil,   nil,   nil,   nil,    99,   125,   nil,   185,    28,    61,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   101,   907,   nil,   822,   nil,   -14,   758,   851,
   nil,   193,   nil,   nil,    28,   215,   nil,   106,   114,   216,
    70,    91,   223,   245,   253,   119,   162,     5,   118,   nil,
   nil,   105,   109,   111,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   275,   117,   283,   305,   342,   116,   120,   246,
   254,   855,   859,   nil,   nil,     7,   138,   nil,   867,   nil,
   313,   335,   nil,   nil,   144,   156,   159,   152,   787,   343,
   911,   193,   nil,   164,   176,   180,   365,   373,   nil,   nil,
   284,   nil,   156,    36,    61,   186,   190,   199,   395,   nil,
   200,   208,   196,   210,   214,   230,   432,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   403,   239,   425,
   433,   834,   455,   463,   485,   nil,   493,   515,   226,   228,
   nil,   nil,   523,   306,   240,   871,   250,   223,   252,   242,
   nil,   nil,   314,   336,   776,   262,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   264,   265,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   272,   875,   879,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   282,    69,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   835,   278,   759,   284,   839,   545,   553,   575,
   300,   308,   nil,   295,   nil,   296,   nil,   296,   nil,   nil,
   nil,   344,   883,   583,   nil,   320,   nil,   324,   887,   891,
   nil,   330,   nil,   329,   899,   605,   nil,   nil,   nil,   613,
   330,   nil,   635,   nil,   643,   665,   673,   nil,   345,   843,
   767,   903,   336,   342,   nil,   nil,   368,   847,   nil,   378,
   768,   695,   703,   365,   366,   725,   nil,   nil,   nil,   356,
   361,   nil,   784,   378,   nil,   380,   382,   795,   nil,   nil,
   nil,   nil,   385,   397,   nil,   400,   nil,   401,   402,   404,
   nil,   nil,   415,   nil,   nil,   418,   nil,   418,   422,   nil,
   420,   421,   nil,   417,   803,   814,   nil,   nil,   429,   nil,
   nil,   nil,   nil,   416,   nil,   nil,   nil,   421,   435,   nil,
   733,   437,   444,   450,   nil,   nil,   447,   nil,   nil,   nil ]

racc_action_default = [
  -204,  -204,    -1,    -2,    -3,    -4,    -5,    -6,    -7,    -8,
   -23,  -204,  -204,   -33,   -34,   -35,   -36,   -37,   -38,   -39,
  -204,  -204,   -42,   -43,   -44,   -45,   -46,   -48,   -49,   -50,
   -51,   -52,  -204,   -66,   -69,   -70,   -71,  -204,   -83,   -87,
   -88,   -89,   -90,   -91,  -204,  -204,  -135,  -204,  -137,  -138,
  -139,  -156,  -157,  -158,  -159,  -160,  -161,  -162,  -163,  -164,
  -165,  -166,  -204,  -204,   -96,  -204,  -140,  -204,  -204,  -204,
   -24,  -204,   -47,   -53,  -204,  -204,   -92,  -204,  -204,  -204,
  -204,  -204,   -74,  -204,  -198,  -204,    -6,    -7,    -8,   -42,
   -48,  -204,  -101,  -106,  -107,  -108,  -110,  -111,  -112,  -113,
  -114,  -115,  -204,  -204,  -204,  -204,  -204,  -204,  -204,  -204,
  -204,  -204,  -204,   370,    -9,   -10,  -204,   -13,  -204,   -30,
  -204,  -204,  -180,   -26,   -28,  -204,  -204,  -154,  -204,  -204,
  -204,  -204,   -27,   -29,  -204,  -204,  -204,  -204,  -181,  -188,
  -204,  -190,  -204,  -204,  -204,  -204,  -204,  -204,   -93,  -202,
  -204,  -204,  -124,  -204,  -130,  -204,    -6,   -64,   -65,   -66,
   -67,   -68,   -69,   -70,   -72,   -73,   -77,   -75,  -204,  -199,
  -204,  -204,  -119,  -118,  -117,   -99,  -204,  -204,    -6,    -7,
  -116,  -100,  -204,  -204,  -204,  -204,  -154,  -204,  -154,  -204,
   -11,   -15,  -204,  -204,  -204,  -204,  -175,  -176,  -177,  -178,
  -173,  -179,  -174,  -142,   -56,   -61,   -78,  -155,   -79,   -80,
   -81,   -82,  -167,  -168,  -169,  -170,  -204,  -204,  -204,  -148,
   -57,   -62,  -182,  -183,  -184,  -185,  -186,  -187,  -189,  -191,
  -204,  -204,   -25,   -54,   -59,   -97,   -55,   -60,   -98,  -203,
   -40,   -41,  -204,  -204,  -204,  -204,  -204,  -204,  -200,   -94,
  -204,  -204,  -122,  -204,  -121,  -204,  -120,  -103,  -104,  -105,
  -109,  -204,  -204,  -204,  -136,  -204,  -141,  -204,  -204,  -204,
  -145,  -204,   -16,  -204,  -204,  -204,  -171,   -17,   -18,  -204,
  -204,   -31,  -204,  -192,  -204,  -204,  -204,  -197,  -204,  -204,
  -204,  -143,  -204,  -204,  -149,  -123,  -204,  -204,  -129,  -204,
  -204,   -95,  -201,   -56,   -61,  -204,   -28,   -29,  -144,  -204,
  -204,  -146,  -204,  -204,  -172,  -204,  -204,  -204,  -196,  -193,
  -194,  -195,  -204,  -204,  -128,  -204,  -134,  -154,  -204,  -204,
  -127,  -125,  -204,  -133,  -131,  -204,   -76,  -204,  -204,  -102,
  -204,  -204,   -20,  -204,  -204,  -204,   -12,   -32,  -204,   -58,
   -63,  -147,  -150,  -204,  -126,  -132,  -152,  -204,  -204,   -22,
  -204,  -204,  -204,  -204,   -21,   -19,  -204,  -151,  -153,   -14 ]

racc_goto_table = [
    84,   148,    12,   206,   283,   131,     7,   133,   142,   258,
   259,   260,     8,     9,    74,    82,   280,   152,   154,     5,
    70,    15,    16,    85,    22,   272,   278,     1,    27,    32,
    33,    34,   359,   359,     2,    35,   276,   276,   149,    91,
   103,     3,     4,     6,   114,   115,    84,   186,   187,   105,
   188,   189,   190,   106,   116,   346,   117,   277,   119,   108,
   347,   167,   266,    13,   270,    14,    17,    18,    19,   168,
    72,    73,   157,   143,   127,    38,   144,    39,    40,    41,
    42,    43,   257,   200,   166,   107,   169,   156,   122,   nil,
   nil,   nil,   212,     8,     9,   nil,   249,   nil,   nil,   200,
   158,   nil,   160,   161,   105,    22,   105,   182,   178,    27,
   164,   159,   162,    70,   179,     9,   163,   nil,   nil,   nil,
   nil,   180,   283,   202,   265,   nil,   nil,   283,   nil,   nil,
   nil,   nil,   nil,   149,   342,   nil,   nil,   nil,   339,   260,
   nil,   nil,   nil,   nil,   nil,   231,   232,   nil,   nil,   nil,
   239,   nil,   nil,   nil,   283,   283,   292,   293,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   166,
   nil,   248,   nil,   301,   105,   105,   105,   nil,   252,   253,
   253,   295,   nil,   298,   263,   254,   255,   256,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   306,
   nil,   307,   nil,   351,   nil,   nil,   nil,   309,   310,   nil,
   149,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   324,   326,
   327,   nil,   nil,   232,   nil,   nil,   331,   nil,   212,   334,
   nil,   nil,   212,   nil,   nil,   200,   nil,   nil,   nil,   nil,
   302,   239,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   232,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   319,   320,   321,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   239,   336,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   200 ]

racc_goto_check = [
    52,    61,    22,    54,    75,    23,     7,    25,    25,    66,
    66,    67,     8,     9,    22,    51,    14,    23,    23,     5,
    21,    31,    32,    62,    36,    17,    17,     1,    41,    46,
    48,    49,    20,    20,     2,    50,    24,    24,    52,    63,
    63,     3,     4,     6,    10,    11,    52,    23,    23,    22,
    25,    25,    12,     7,    13,    15,    16,    18,    27,     8,
    28,    51,    54,    29,    54,    30,    33,    34,    35,    62,
    40,    45,    47,    22,    53,    55,    22,    56,    57,    58,
    59,    60,    65,    52,    22,    70,    22,     7,    74,   nil,
   nil,   nil,    52,     8,     9,   nil,    61,   nil,   nil,    52,
     5,   nil,    31,    32,    22,    36,    22,    22,     7,    41,
    46,    48,    49,    21,     8,     9,    50,   nil,   nil,   nil,
   nil,     5,    75,    22,    25,   nil,   nil,    75,   nil,   nil,
   nil,   nil,   nil,    52,    14,   nil,   nil,   nil,    66,    67,
   nil,   nil,   nil,   nil,   nil,    22,    22,   nil,   nil,   nil,
    22,   nil,   nil,   nil,    75,    75,    25,    25,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    22,
   nil,    22,   nil,    61,    22,    22,    22,   nil,     7,     7,
     7,    25,   nil,    25,    22,     8,     8,     9,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    23,
   nil,    25,   nil,    54,   nil,   nil,   nil,    25,    25,   nil,
    52,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    25,    25,
    25,   nil,   nil,    22,   nil,   nil,    25,   nil,    52,    25,
   nil,   nil,    52,   nil,   nil,    52,   nil,   nil,   nil,   nil,
    22,    22,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    22,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    22,    22,    22,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    22,    22,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    52 ]

racc_goto_pointer = [
   nil,    27,    34,    41,    42,    19,    43,     6,    12,    13,
   -19,   -18,   -63,    -9,  -178,  -262,    -7,  -167,  -136,   nil,
  -312,     9,     2,   -62,  -156,   -61,   nil,    -5,  -257,    63,
    65,    21,    22,    66,    67,    68,    24,   nil,   nil,   nil,
    59,    28,   nil,   nil,   nil,    60,    29,    -9,    30,    31,
    35,   -22,   -37,     9,  -124,    75,    77,    78,    79,    80,
    81,   -74,   -14,    -5,   nil,   -94,  -167,  -166,   nil,   nil,
    38,   nil,   nil,   nil,    25,  -190,   nil ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,    98,   nil,    86,    87,    88,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   273,
   287,    10,    71,   124,   123,   nil,   132,   nil,   281,   nil,
   nil,   100,   101,   nil,   nil,   nil,    89,    23,    24,    25,
    26,    90,    28,    29,    30,    31,   nil,   nil,    99,   nil,
   nil,   nil,    52,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    92,    93,    94,    95,    96,    97,
    46,    48,    49,    50,   138,   139,   141 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 39, :_reduce_none,
  1, 39, :_reduce_none,
  1, 39, :_reduce_none,
  1, 40, :_reduce_none,
  1, 40, :_reduce_none,
  1, 43, :_reduce_6,
  1, 43, :_reduce_7,
  1, 43, :_reduce_8,
  3, 44, :_reduce_9,
  1, 48, :_reduce_none,
  2, 48, :_reduce_11,
  5, 49, :_reduce_12,
  1, 49, :_reduce_none,
  8, 54, :_reduce_14,
  1, 50, :_reduce_15,
  2, 50, :_reduce_16,
  2, 50, :_reduce_17,
  1, 56, :_reduce_none,
  5, 56, :_reduce_19,
  3, 55, :_reduce_20,
  5, 55, :_reduce_21,
  4, 55, :_reduce_22,
  1, 45, :_reduce_none,
  2, 45, :_reduce_24,
  4, 59, :_reduce_25,
  1, 61, :_reduce_none,
  1, 63, :_reduce_none,
  3, 46, :_reduce_28,
  3, 47, :_reduce_29,
  1, 51, :_reduce_none,
  1, 52, :_reduce_none,
  1, 53, :_reduce_none,
  1, 41, :_reduce_none,
  1, 41, :_reduce_none,
  1, 41, :_reduce_none,
  1, 41, :_reduce_none,
  1, 41, :_reduce_none,
  1, 41, :_reduce_none,
  1, 41, :_reduce_none,
  4, 67, :_reduce_40,
  4, 68, :_reduce_41,
  1, 69, :_reduce_42,
  1, 69, :_reduce_none,
  1, 69, :_reduce_none,
  1, 69, :_reduce_none,
  1, 74, :_reduce_none,
  2, 74, :_reduce_47,
  1, 70, :_reduce_48,
  1, 70, :_reduce_none,
  1, 70, :_reduce_none,
  1, 70, :_reduce_none,
  1, 79, :_reduce_none,
  2, 79, :_reduce_53,
  4, 78, :_reduce_54,
  4, 78, :_reduce_55,
  4, 75, :_reduce_56,
  4, 76, :_reduce_57,
  7, 77, :_reduce_58,
  4, 83, :_reduce_59,
  4, 83, :_reduce_60,
  4, 80, :_reduce_61,
  4, 81, :_reduce_62,
  7, 82, :_reduce_63,
  3, 71, :_reduce_64,
  1, 84, :_reduce_none,
  1, 84, :_reduce_none,
  1, 84, :_reduce_none,
  1, 84, :_reduce_none,
  1, 84, :_reduce_none,
  1, 84, :_reduce_none,
  1, 84, :_reduce_none,
  1, 85, :_reduce_none,
  1, 85, :_reduce_none,
  2, 72, :_reduce_74,
  3, 72, :_reduce_75,
  5, 89, :_reduce_76,
  2, 89, :_reduce_77,
  4, 73, :_reduce_78,
  2, 91, :_reduce_79,
  2, 91, :_reduce_80,
  2, 91, :_reduce_81,
  2, 91, :_reduce_82,
  1, 42, :_reduce_none,
  1, 42, :_reduce_none,
  1, 42, :_reduce_none,
  1, 42, :_reduce_none,
  1, 42, :_reduce_none,
  1, 42, :_reduce_none,
  1, 42, :_reduce_none,
  1, 42, :_reduce_none,
  1, 42, :_reduce_none,
  2, 93, :_reduce_92,
  3, 98, :_reduce_93,
  4, 98, :_reduce_94,
  5, 98, :_reduce_95,
  2, 97, :_reduce_96,
  4, 96, :_reduce_97,
  4, 96, :_reduce_98,
  3, 94, :_reduce_99,
  3, 95, :_reduce_100,
  1, 101, :_reduce_101,
  5, 101, :_reduce_102,
  3, 101, :_reduce_103,
  3, 101, :_reduce_104,
  3, 101, :_reduce_105,
  1, 101, :_reduce_106,
  1, 101, :_reduce_107,
  1, 103, :_reduce_108,
  3, 103, :_reduce_109,
  1, 105, :_reduce_none,
  1, 105, :_reduce_none,
  1, 106, :_reduce_none,
  1, 106, :_reduce_none,
  1, 106, :_reduce_none,
  1, 106, :_reduce_none,
  2, 102, :_reduce_116,
  2, 104, :_reduce_117,
  2, 104, :_reduce_118,
  2, 104, :_reduce_119,
  3, 107, :_reduce_120,
  3, 107, :_reduce_121,
  3, 107, :_reduce_122,
  5, 87, :_reduce_123,
  3, 87, :_reduce_124,
  6, 87, :_reduce_125,
  7, 87, :_reduce_126,
  6, 87, :_reduce_127,
  6, 87, :_reduce_128,
  5, 88, :_reduce_129,
  3, 88, :_reduce_130,
  6, 88, :_reduce_131,
  7, 88, :_reduce_132,
  6, 88, :_reduce_133,
  6, 88, :_reduce_134,
  1, 86, :_reduce_none,
  4, 86, :_reduce_136,
  1, 108, :_reduce_137,
  1, 108, :_reduce_138,
  1, 108, :_reduce_139,
  2, 109, :_reduce_140,
  4, 110, :_reduce_141,
  4, 110, :_reduce_142,
  5, 110, :_reduce_143,
  5, 110, :_reduce_144,
  4, 111, :_reduce_145,
  5, 111, :_reduce_146,
  7, 111, :_reduce_147,
  4, 111, :_reduce_148,
  5, 111, :_reduce_149,
  7, 111, :_reduce_150,
  9, 111, :_reduce_151,
  7, 111, :_reduce_152,
  9, 111, :_reduce_153,
  0, 92, :_reduce_154,
  1, 92, :_reduce_none,
  1, 60, :_reduce_156,
  1, 60, :_reduce_none,
  1, 90, :_reduce_none,
  1, 90, :_reduce_none,
  1, 90, :_reduce_none,
  1, 90, :_reduce_none,
  1, 90, :_reduce_none,
  1, 90, :_reduce_none,
  1, 90, :_reduce_none,
  1, 90, :_reduce_none,
  1, 90, :_reduce_none,
  2, 62, :_reduce_167,
  2, 62, :_reduce_168,
  2, 62, :_reduce_169,
  2, 62, :_reduce_170,
  1, 57, :_reduce_none,
  2, 57, :_reduce_172,
  2, 112, :_reduce_173,
  2, 112, :_reduce_174,
  2, 112, :_reduce_175,
  2, 112, :_reduce_176,
  2, 112, :_reduce_177,
  2, 112, :_reduce_178,
  2, 65, :_reduce_none,
  1, 65, :_reduce_none,
  1, 113, :_reduce_none,
  2, 113, :_reduce_182,
  2, 113, :_reduce_183,
  2, 113, :_reduce_184,
  2, 113, :_reduce_185,
  2, 113, :_reduce_186,
  2, 113, :_reduce_187,
  1, 114, :_reduce_none,
  2, 114, :_reduce_189,
  1, 64, :_reduce_none,
  2, 64, :_reduce_191,
  1, 58, :_reduce_none,
  2, 58, :_reduce_193,
  2, 58, :_reduce_194,
  2, 58, :_reduce_195,
  2, 66, :_reduce_none,
  1, 66, :_reduce_none,
  1, 100, :_reduce_198,
  2, 100, :_reduce_199,
  3, 100, :_reduce_200,
  4, 100, :_reduce_201,
  1, 99, :_reduce_202,
  2, 99, :_reduce_203 ]

racc_reduce_n = 204

racc_shift_n = 370

racc_token_table = {
  false => 0,
  :error => 1,
  :T => 2,
  :Z => 3,
  :E => 4,
  :X => 5,
  :x => 6,
  :U => 7,
  :UNKNOWN => 8,
  :OPEN => 9,
  :LONGYEAR => 10,
  :UNMATCHED => 11,
  :DOTS => 12,
  :UA => 13,
  :PUA => 14,
  ":" => 15,
  "2" => 16,
  "4" => 17,
  "0" => 18,
  "-" => 19,
  "+" => 20,
  "1" => 21,
  "/" => 22,
  "3" => 23,
  "^" => 24,
  "[" => 25,
  "]" => 26,
  "{" => 27,
  "}" => 28,
  "," => 29,
  "(" => 30,
  ")" => 31,
  "-(" => 32,
  "5" => 33,
  "6" => 34,
  "7" => 35,
  "8" => 36,
  "9" => 37 }

racc_nt_base = 38

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "T",
  "Z",
  "E",
  "X",
  "x",
  "U",
  "UNKNOWN",
  "OPEN",
  "LONGYEAR",
  "UNMATCHED",
  "DOTS",
  "UA",
  "PUA",
  "\":\"",
  "\"2\"",
  "\"4\"",
  "\"0\"",
  "\"-\"",
  "\"+\"",
  "\"1\"",
  "\"/\"",
  "\"3\"",
  "\"^\"",
  "\"[\"",
  "\"]\"",
  "\"{\"",
  "\"}\"",
  "\",\"",
  "\"(\"",
  "\")\"",
  "\"-(\"",
  "\"5\"",
  "\"6\"",
  "\"7\"",
  "\"8\"",
  "\"9\"",
  "$start",
  "edtf",
  "level_0_expression",
  "level_1_expression",
  "level_2_expression",
  "date",
  "date_time",
  "year",
  "year_month",
  "year_month_day",
  "time",
  "base_time",
  "zone_offset",
  "hour",
  "minute",
  "second",
  "midnight",
  "zone_offset_hour",
  "positive_zone_offset",
  "d01_13",
  "d01_59",
  "positive_year",
  "digit",
  "month",
  "d01_12",
  "day",
  "d01_31",
  "d00_23",
  "d00_59",
  "draft_unknown",
  "final_unknown",
  "draft_unspecified",
  "final_unspecified",
  "level_1_interval",
  "long_year_simple",
  "season",
  "draft_unspecified_year",
  "draft_unspecified_month",
  "draft_unspecified_day",
  "draft_unspecified_day_and_month",
  "draft_positive_unspecified_year",
  "final_unspecified_year",
  "final_unspecified_month",
  "final_unspecified_day",
  "final_unspecified_day_and_month",
  "final_positive_unspecified_year",
  "level_1_start",
  "level_1_end",
  "partial_uncertain_or_approximate",
  "draft_partial_unspecified",
  "final_partial_unspecified",
  "long_year",
  "positive_digit",
  "season_number",
  "ua",
  "season_qualified",
  "choice_list",
  "inclusive_list",
  "masked_precision",
  "date_and_calendar",
  "long_year_scientific",
  "integer",
  "int1_4",
  "list",
  "earlier",
  "list_elements",
  "later",
  "list_element",
  "atomic",
  "consecutives",
  "pua_base",
  "pua_year",
  "pua_year_month",
  "pua_year_month_day",
  "d01_23",
  "d01_29",
  "d01_30" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

# reduce 2 omitted

# reduce 3 omitted

# reduce 4 omitted

# reduce 5 omitted

module_eval(<<'.,.,', 'parser.y', 23)
  def _reduce_6(val, _values, result)
     result = Date.new(val[0]).year_precision!
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 24)
  def _reduce_7(val, _values, result)
     result = Date.new(*val.flatten).month_precision!
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 25)
  def _reduce_8(val, _values, result)
     result = Date.new(*val.flatten).day_precision!
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 30)
  def _reduce_9(val, _values, result)
        result = DateTime.new(val[0].year, val[0].month, val[0].day, *val[2])
    result.skip_timezone = (val[2].length == 3)

    result
  end
.,.,

# reduce 10 omitted

module_eval(<<'.,.,', 'parser.y', 35)
  def _reduce_11(val, _values, result)
     result = val.flatten
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 37)
  def _reduce_12(val, _values, result)
     result = val.values_at(0, 2, 4)
    result
  end
.,.,

# reduce 13 omitted

module_eval(<<'.,.,', 'parser.y', 40)
  def _reduce_14(val, _values, result)
     result = [24, 0, 0]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 42)
  def _reduce_15(val, _values, result)
     result = 0
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 43)
  def _reduce_16(val, _values, result)
     result = -1 * val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 44)
  def _reduce_17(val, _values, result)
     result = val[1]
    result
  end
.,.,

# reduce 18 omitted

module_eval(<<'.,.,', 'parser.y', 48)
  def _reduce_19(val, _values, result)
     result = 0
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 52)
  def _reduce_20(val, _values, result)
     result = Rational(val[0] * 60 + val[2], 1440)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 53)
  def _reduce_21(val, _values, result)
     result = Rational(840, 1440)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 54)
  def _reduce_22(val, _values, result)
     result = Rational(val[3], 1440)
    result
  end
.,.,

# reduce 23 omitted

module_eval(<<'.,.,', 'parser.y', 58)
  def _reduce_24(val, _values, result)
     result = -val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 61)
  def _reduce_25(val, _values, result)
        result = val.zip([1000,100,10,1]).reduce(0) { |s,(a,b)| s += a * b }

    result
  end
.,.,

# reduce 26 omitted

# reduce 27 omitted

module_eval(<<'.,.,', 'parser.y', 67)
  def _reduce_28(val, _values, result)
     result = [val[0], val[2]]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 74)
  def _reduce_29(val, _values, result)
        result = val[0] << val[2]
    if result[2] > 31 || (result[2] > 30 && [2,4,6,9,11].include?(result[1])) || (result[2] > 29 && result[1] == 2)
      raise ArgumentError, "invalid date (invalid days #{result[2]} for month #{result[1]})"
    end

    result
  end
.,.,

# reduce 30 omitted

# reduce 31 omitted

# reduce 32 omitted

# reduce 33 omitted

# reduce 34 omitted

# reduce 35 omitted

# reduce 36 omitted

# reduce 37 omitted

# reduce 38 omitted

# reduce 39 omitted

module_eval(<<'.,.,', 'parser.y', 93)
  def _reduce_40(val, _values, result)
     result = EDTF::Unknown.new
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 95)
  def _reduce_41(val, _values, result)
     result = EDTF::Unknown.new
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 101)
  def _reduce_42(val, _values, result)
                    result = Date.new(val[0][0]).year_precision!
                result.unspecified.year[2,2] = val[0][1]

    result
  end
.,.,

# reduce 43 omitted

# reduce 44 omitted

# reduce 45 omitted

# reduce 46 omitted

module_eval(<<'.,.,', 'parser.y', 112)
  def _reduce_47(val, _values, result)
                         result = val[1]
                     result[0] = -result[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 118)
  def _reduce_48(val, _values, result)
                   result = Date.new(val[0][0]).year_precision!
               result.unspecified.year[2,2] = val[0][1]

    result
  end
.,.,

# reduce 49 omitted

# reduce 50 omitted

# reduce 51 omitted

# reduce 52 omitted

module_eval(<<'.,.,', 'parser.y', 129)
  def _reduce_53(val, _values, result)
                         result = val[1]
                     result[0] = -result[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 136)
  def _reduce_54(val, _values, result)
          result = [val[0,3].zip([1000,100,10]).reduce(0) { |s,(a,b)| s += a * b }, [false,true]]

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 140)
  def _reduce_55(val, _values, result)
          result = [val[0,2].zip([1000,100]).reduce(0) { |s,(a,b)| s += a * b }, [true, true]]

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 144)
  def _reduce_56(val, _values, result)
        result = Date.new(val[0]).unspecified!(:month)
    result.precision = :month

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 149)
  def _reduce_57(val, _values, result)
        result = Date.new(*val[0]).unspecified!(:day)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 153)
  def _reduce_58(val, _values, result)
        result = Date.new(val[0]).unspecified!([:day,:month])

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 159)
  def _reduce_59(val, _values, result)
          result = [val[0,3].zip([1000,100,10]).reduce(0) { |s,(a,b)| s += a * b }, [false,true]]

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 163)
  def _reduce_60(val, _values, result)
          result = [val[0,2].zip([1000,100]).reduce(0) { |s,(a,b)| s += a * b }, [true, true]]

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 167)
  def _reduce_61(val, _values, result)
        result = Date.new(val[0]).unspecified!(:month)
    result.precision = :month

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 172)
  def _reduce_62(val, _values, result)
        result = Date.new(*val[0]).unspecified!(:day)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 176)
  def _reduce_63(val, _values, result)
        result = Date.new(val[0]).unspecified!([:day,:month])

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 180)
  def _reduce_64(val, _values, result)
        result = Interval.new(val[0], val[2])

    result
  end
.,.,

# reduce 65 omitted

# reduce 66 omitted

# reduce 67 omitted

# reduce 68 omitted

# reduce 69 omitted

# reduce 70 omitted

# reduce 71 omitted

# reduce 72 omitted

# reduce 73 omitted

module_eval(<<'.,.,', 'parser.y', 191)
  def _reduce_74(val, _values, result)
          result = Date.new(val[1])
      result.precision = :year

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 196)
  def _reduce_75(val, _values, result)
          result = Date.new(-1 * val[2])
      result.precision = :year

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 203)
  def _reduce_76(val, _values, result)
          result = val.zip([10000,1000,100,10,1]).reduce(0) { |s,(a,b)| s += a * b }

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 205)
  def _reduce_77(val, _values, result)
     result = 10 * val[0] + val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 210)
  def _reduce_78(val, _values, result)
        result = Season.new(val[0], val[2])
    val[3].each { |ua| result.send(ua) }

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 214)
  def _reduce_79(val, _values, result)
     result = 21
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 215)
  def _reduce_80(val, _values, result)
     result = 22
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 216)
  def _reduce_81(val, _values, result)
     result = 23
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 217)
  def _reduce_82(val, _values, result)
     result = 24
    result
  end
.,.,

# reduce 83 omitted

# reduce 84 omitted

# reduce 85 omitted

# reduce 86 omitted

# reduce 87 omitted

# reduce 88 omitted

# reduce 89 omitted

# reduce 90 omitted

# reduce 91 omitted

module_eval(<<'.,.,', 'parser.y', 236)
  def _reduce_92(val, _values, result)
     result = val[0]; result.qualifier = val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 242)
  def _reduce_93(val, _values, result)
          result = Date.new(val[0].year * 10 ** val[2]).year_precision!

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 246)
  def _reduce_94(val, _values, result)
          result = Date.new(val[1] * 10 ** val[3]).year_precision!

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 250)
  def _reduce_95(val, _values, result)
          result = Date.new(-1 * val[2] * 10 ** val[4]).year_precision!

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 255)
  def _reduce_96(val, _values, result)
     result = val[0]; result.calendar = val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 261)
  def _reduce_97(val, _values, result)
          d = val[0,3].zip([1000,100,10]).reduce(0) { |s,(a,b)| s += a * b }
      result = EDTF::Decade.new(d)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 266)
  def _reduce_98(val, _values, result)
          d = val[0,2].zip([1000,100]).reduce(0) { |s,(a,b)| s += a * b }
      result = EDTF::Century.new(d)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 272)
  def _reduce_99(val, _values, result)
     result = val[1].choice!
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 274)
  def _reduce_100(val, _values, result)
     result = val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 276)
  def _reduce_101(val, _values, result)
     result = EDTF::Set.new(val[0]).earlier!
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 277)
  def _reduce_102(val, _values, result)
     result = EDTF::Set.new([val[0]] + val[2] + [val[4]]).earlier!.later!
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 278)
  def _reduce_103(val, _values, result)
     result = EDTF::Set.new([val[0]] + val[2]).earlier!
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 279)
  def _reduce_104(val, _values, result)
     result = EDTF::Set.new([val[0]] + [val[2]]).earlier!.later!
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 280)
  def _reduce_105(val, _values, result)
     result = EDTF::Set.new(val[0] + [val[2]]).later!
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 281)
  def _reduce_106(val, _values, result)
     result = EDTF::Set.new(*val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 282)
  def _reduce_107(val, _values, result)
     result = EDTF::Set.new(val[0]).later!
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 285)
  def _reduce_108(val, _values, result)
     result = [val[0]].flatten
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 286)
  def _reduce_109(val, _values, result)
     result = val[0] + [val[2]].flatten
    result
  end
.,.,

# reduce 110 omitted

# reduce 111 omitted

# reduce 112 omitted

# reduce 113 omitted

# reduce 114 omitted

# reduce 115 omitted

module_eval(<<'.,.,', 'parser.y', 299)
  def _reduce_116(val, _values, result)
     result = val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 301)
  def _reduce_117(val, _values, result)
     result = Date.new(*val[0]).day_precision!
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 302)
  def _reduce_118(val, _values, result)
     result = Date.new(*val[0]).month_precision!
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 303)
  def _reduce_119(val, _values, result)
     result = Date.new(val[0]).year_precision!
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 306)
  def _reduce_120(val, _values, result)
     result = (Date.new(val[0]).day_precision! .. Date.new(val[2]).day_precision!)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 307)
  def _reduce_121(val, _values, result)
     result = (Date.new(val[0]).month_precision! .. Date.new(val[2]).month_precision!)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 308)
  def _reduce_122(val, _values, result)
     result = (Date.new(val[0]).year_precision! .. Date.new(val[2]).year_precision!)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 314)
  def _reduce_123(val, _values, result)
          result = Date.new(val[0][0], val[2], val[4])
      result.unspecified.year[2,2] = val[0][1]

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 319)
  def _reduce_124(val, _values, result)
          result = Date.new(val[0][0], val[2], 1)
      result.month_precision!
      result.unspecified.year[2,2] = val[0][1]

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 325)
  def _reduce_125(val, _values, result)
          result = Date.new(val[0][0], 1, val[5])
      result.unspecified.year[2,2] = val[0][1]
      result.unspecified!(:month)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 331)
  def _reduce_126(val, _values, result)
          result = Date.new(val[0][0], 1, 1)
      result.unspecified.year[2,2] = val[0][1]
      result.unspecified!([:month, :day])

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 337)
  def _reduce_127(val, _values, result)
          result = Date.new(val[0][0], val[2], 1)
      result.unspecified.year[2,2] = val[0][1]
      result.unspecified!(:day)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 343)
  def _reduce_128(val, _values, result)
          result = Date.new(val[0], 1, val[5])
      result.unspecified!(:month)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 351)
  def _reduce_129(val, _values, result)
          result = Date.new(val[0][0], val[2], val[4])
      result.unspecified.year[2,2] = val[0][1]

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 356)
  def _reduce_130(val, _values, result)
          result = Date.new(val[0][0], val[2], 1)
      result.month_precision!
      result.unspecified.year[2,2] = val[0][1]

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 362)
  def _reduce_131(val, _values, result)
          result = Date.new(val[0][0], 1, val[5])
      result.unspecified.year[2,2] = val[0][1]
      result.unspecified!(:month)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 368)
  def _reduce_132(val, _values, result)
          result = Date.new(val[0][0], 1, 1)
      result.unspecified.year[2,2] = val[0][1]
      result.unspecified!([:month, :day])

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 374)
  def _reduce_133(val, _values, result)
          result = Date.new(val[0][0], val[2], 1)
      result.unspecified.year[2,2] = val[0][1]
      result.unspecified!(:day)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 380)
  def _reduce_134(val, _values, result)
          result = Date.new(val[0], 1, val[5])
      result.unspecified!(:month)

    result
  end
.,.,

# reduce 135 omitted

module_eval(<<'.,.,', 'parser.y', 386)
  def _reduce_136(val, _values, result)
     result = uoa(val[1], val[3])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 389)
  def _reduce_137(val, _values, result)
     result = val[0].year_precision!
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 390)
  def _reduce_138(val, _values, result)
     result = val[0][0].month_precision!
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 391)
  def _reduce_139(val, _values, result)
     result = val[0].day_precision!
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 393)
  def _reduce_140(val, _values, result)
     result = uoa(Date.new(val[0]), val[1], :year)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 397)
  def _reduce_141(val, _values, result)
          result = [uoa(val[0].change(:month => val[2]), val[3], [:month, :year])]

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 400)
  def _reduce_142(val, _values, result)
            result = [uoa(Date.new(val[0], val[2]), val[3], [:year, :month])]

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 403)
  def _reduce_143(val, _values, result)
            result = [uoa(Date.new(val[0], val[2]), val[4], [:month]), true]

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 406)
  def _reduce_144(val, _values, result)
            result = [uoa(val[0].change(:month => val[2]), val[4], [:month]), true]

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 412)
  def _reduce_145(val, _values, result)
          result = uoa(val[0][0].change(:day => val[2]), val[3], val[0][1] ? [:day] : nil)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 415)
  def _reduce_146(val, _values, result)
            result = uoa(val[0][0].change(:day => val[2]), val[4], [:day])

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 418)
  def _reduce_147(val, _values, result)
            result = uoa(uoa(Date.new(val[0], val[2], val[5]), val[4], :month), val[6], :day)

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 421)
  def _reduce_148(val, _values, result)
            result = uoa(Date.new(val[0][0], val[0][1], val[2]), val[3])

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 424)
  def _reduce_149(val, _values, result)
            result = uoa(Date.new(val[0][0], val[0][1], val[2]), val[4], [:day])

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 427)
  def _reduce_150(val, _values, result)
            result = uoa(Date.new(val[0], val[2], val[4]), val[6], [:month, :day])

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 430)
  def _reduce_151(val, _values, result)
            result = Date.new(val[0], val[2], val[4])
        result = uoa(result, val[6], [:day])
        result = uoa(result, val[8], [:month, :day])

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 435)
  def _reduce_152(val, _values, result)
            result = val[0].change(:month => val[2], :day => val[4])
        result = uoa(result, val[6], [:month, :day])

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 439)
  def _reduce_153(val, _values, result)
            result = val[0].change(:month => val[2], :day => val[4])
        result = uoa(result, val[6], [:day])
        result = uoa(result, val[8], [:month, :day])

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 450)
  def _reduce_154(val, _values, result)
     result = []
    result
  end
.,.,

# reduce 155 omitted

module_eval(<<'.,.,', 'parser.y', 454)
  def _reduce_156(val, _values, result)
     result = 0
    result
  end
.,.,

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

# reduce 162 omitted

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

module_eval(<<'.,.,', 'parser.y', 460)
  def _reduce_167(val, _values, result)
     result = val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 461)
  def _reduce_168(val, _values, result)
     result = 10
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 462)
  def _reduce_169(val, _values, result)
     result = 11
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 463)
  def _reduce_170(val, _values, result)
     result = 12
    result
  end
.,.,

# reduce 171 omitted

module_eval(<<'.,.,', 'parser.y', 467)
  def _reduce_172(val, _values, result)
     result = 13
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 470)
  def _reduce_173(val, _values, result)
     result = val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 471)
  def _reduce_174(val, _values, result)
     result = 10 + val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 472)
  def _reduce_175(val, _values, result)
     result = 20
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 473)
  def _reduce_176(val, _values, result)
     result = 21
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 474)
  def _reduce_177(val, _values, result)
     result = 22
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 475)
  def _reduce_178(val, _values, result)
     result = 23
    result
  end
.,.,

# reduce 179 omitted

# reduce 180 omitted

# reduce 181 omitted

module_eval(<<'.,.,', 'parser.y', 483)
  def _reduce_182(val, _values, result)
     result = 24
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 484)
  def _reduce_183(val, _values, result)
     result = 25
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 485)
  def _reduce_184(val, _values, result)
     result = 26
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 486)
  def _reduce_185(val, _values, result)
     result = 27
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 487)
  def _reduce_186(val, _values, result)
     result = 28
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 488)
  def _reduce_187(val, _values, result)
     result = 29
    result
  end
.,.,

# reduce 188 omitted

module_eval(<<'.,.,', 'parser.y', 492)
  def _reduce_189(val, _values, result)
     result = 30
    result
  end
.,.,

# reduce 190 omitted

module_eval(<<'.,.,', 'parser.y', 496)
  def _reduce_191(val, _values, result)
     result = 31
    result
  end
.,.,

# reduce 192 omitted

module_eval(<<'.,.,', 'parser.y', 500)
  def _reduce_193(val, _values, result)
     result = 30 + val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 501)
  def _reduce_194(val, _values, result)
     result = 40 + val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 502)
  def _reduce_195(val, _values, result)
     result = 50 + val[1]
    result
  end
.,.,

# reduce 196 omitted

# reduce 197 omitted

module_eval(<<'.,.,', 'parser.y', 509)
  def _reduce_198(val, _values, result)
     result = val[0]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 510)
  def _reduce_199(val, _values, result)
     result = 10 * val[0] + val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 513)
  def _reduce_200(val, _values, result)
               result = val.zip([100,10,1]).reduce(0) { |s,(a,b)| s += a * b }

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 517)
  def _reduce_201(val, _values, result)
               result = val.zip([1000,100,10,1]).reduce(0) { |s,(a,b)| s += a * b }

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 521)
  def _reduce_202(val, _values, result)
     result = val[0]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 522)
  def _reduce_203(val, _values, result)
     result = 10 * val[0] + val[1]
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
end   # module EDTF
