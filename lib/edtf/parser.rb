#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'

require 'strscan'

module EDTF
  class Parser < Racc::Parser

module_eval(<<'...end parser.y/module_eval...', 'parser.y', 443)

  @defaults = {
    :level => 2,
    :debug => false
  }.freeze

  class << self; attr_reader :defaults; end

  attr_reader :options

  def initialize(options = {})
    @options = Parser.defaults.merge(options)
  end

  def debug?
    !!(options[:debug] || ENV['DEBUG'])
  end

  def parse(input)
    parse!(input)
  rescue => e
    warn e.message if debug?
    nil
  end

  def parse!(input)
    @yydebug = debug?
    @src = StringScanner.new(input)
    do_parse
  end

  def on_error(tid, value, stack)
    raise ArgumentError,
      "failed to parse date: unexpected '#{value}' at #{stack.inspect}"
  end

  def apply_uncertainty(date, uncertainty, scope = nil)
    uncertainty.each do |u|
      scope.nil? ? date.send(u) : date.send(u, scope)
    end
    date
  end

  alias uoa apply_uncertainty

  def next_token
    case
    when @src.eos?
      nil
    # when @src.scan(/\s+/)
      # ignore whitespace
    when @src.scan(/\(/)
      ['(', @src.matched]
    # when @src.scan(/\)\?~-/)
    #   [:PUA, [:uncertain!, :approximate!]]
    # when @src.scan(/\)\?-/)
    #   [:PUA, [:uncertain!]]
    # when @src.scan(/\)~-/)
    #   [:PUA, [:approximate!]]
    when @src.scan(/\)/)
      [')', @src.matched]
    when @src.scan(/\[/)
      ['[', @src.matched]
    when @src.scan(/\]/)
      [']', @src.matched]
    when @src.scan(/\{/)
      ['{', @src.matched]
    when @src.scan(/\}/)
      ['}', @src.matched]
    when @src.scan(/T/)
      [:T, @src.matched]
    when @src.scan(/Z/)
      [:Z, @src.matched]
    when @src.scan(/\?~/)
      [:UA, [:uncertain!, :approximate!]]
    when @src.scan(/\?/)
      [:UA, [:uncertain!]]
    when @src.scan(/~/)
      [:UA, [:approximate!]]
    when @src.scan(/open/i)
      [:OPEN, :open]
    when @src.scan(/unkn?own/i) # matches 'unkown' typo too
      [:UNKNOWN, :unknown]
    when @src.scan(/u/)
      [:U, @src.matched]
    when @src.scan(/x/i)
      [:X, @src.matched]
    when @src.scan(/y/)
      [:LONGYEAR, @src.matched]
    when @src.scan(/e/)
      [:E, @src.matched]
    when @src.scan(/\+/)
      ['+', @src.matched]
    when @src.scan(/-\(/)
      ['-(', @src.matched]
    when @src.scan(/-/)
      ['-', @src.matched]
    when @src.scan(/:/)
      [':', @src.matched]
    when @src.scan(/\//)
      ['/', @src.matched]
    when @src.scan(/\s*\.\.\s*/)
      [:DOTS, '..']
    when @src.scan(/\s*,\s*/)
      [',', ',']
    when @src.scan(/\^\w+/)
      ['^', @src.matched[1..-1]]
    when @src.scan(/\d/)
      [@src.matched, @src.matched.to_i]
    else @src.scan(/./)
      [:UNMATCHED, @src.rest]
    end
  end


# -*- racc -*-
...end parser.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
   132,   131,    54,   114,    53,   115,   153,   212,   211,    59,
   -52,    45,    47,    42,    57,    44,    56,    46,    45,    47,
    42,   -50,    44,    55,    46,    66,    60,    48,    49,    50,
    51,    52,    67,    58,    48,    49,    50,    51,    52,    19,
    27,    59,    28,   152,    57,    68,   151,    12,    69,    45,
    47,    42,    70,    44,    57,    46,   161,    35,    60,    36,
   131,    95,    38,    58,   -67,    48,    49,    50,    51,    52,
    45,    47,    42,    58,    44,    57,    46,   219,    96,    97,
   -68,   211,   163,   114,   194,   115,    48,    49,    50,    51,
    52,    45,    47,    42,    58,    44,    98,    46,    99,    60,
   193,   195,   114,   127,   115,    27,   145,    48,    49,    50,
    51,    52,    12,   169,    45,    47,    42,   121,    44,   120,
    46,   107,   128,   124,   170,   135,   204,    38,   205,   171,
    48,    49,    50,    51,    52,    90,   137,   111,    12,   150,
    45,    47,    42,   114,    44,   115,    46,   113,   114,   114,
   115,   115,   114,    38,   115,   154,    48,    49,    50,    51,
    52,    90,   223,   245,    12,   244,    45,    47,    42,   104,
    44,   106,    46,   107,   114,   238,   115,   156,   249,    38,
   244,   157,    48,    49,    50,    51,    52,    72,   158,    45,
    47,   237,   239,    44,    12,    46,    45,    47,    42,   192,
    44,   190,    46,   191,   160,    48,    49,    50,    51,    52,
   111,   162,    48,    49,    50,    51,    52,    12,   172,    45,
    47,    42,   114,    44,   115,    46,   181,   121,   182,   120,
   184,   107,    38,   124,   196,    48,    49,    50,    51,    52,
    12,   197,    45,    47,    42,   121,    44,   120,    46,   107,
   121,   124,   120,   206,   107,    38,   124,   213,    48,    49,
    50,    51,    52,    12,   214,    45,    47,    42,   216,    44,
   217,    46,   218,    45,    47,    42,   220,    44,    38,    46,
   234,    48,    49,    50,    51,    52,   184,   184,   241,    48,
    49,    50,    51,    52,    45,    47,    42,   258,    44,   259,
    46,    45,    47,    42,   260,    44,   263,    46,   266,   269,
    48,    49,    50,    51,    52,   127,   128,    48,    49,    50,
    51,    52,    45,    47,    42,   270,    44,   196,    46,    45,
    47,   271,   274,    44,   275,    46,   280,   285,    48,    49,
    50,    51,    52,   289,   290,    48,    49,    50,    51,    52,
    45,    47,    42,   291,    44,   295,    46,    45,    47,   297,
   298,    44,   300,    46,   301,   302,    48,    49,    50,    51,
    52,   305,   306,    48,    49,    50,    51,    52,    45,    47,
    42,   184,    44,   308,    46,    45,    47,    42,   309,    44,
   310,    46,   286,   311,    48,    49,    50,    51,    52,   312,
   313,    48,    49,    50,    51,    52,    45,    47,   179,   316,
    44,   317,    46,    45,    47,    42,   318,    44,   319,    46,
   321,   322,    48,    49,    50,    51,    52,   323,   324,    48,
    49,    50,    51,    52,    45,    47,   nil,   nil,    44,   nil,
    46,    45,    47,   nil,   nil,    44,   nil,    46,   nil,   nil,
    48,    49,    50,    51,    52,   nil,   nil,    48,    49,    50,
    51,    52,   176,   198,   174,   nil,   175,   nil,   177,    45,
    47,    42,   nil,    44,   nil,    46,   nil,   nil,   199,   200,
   201,   202,   203,   nil,   nil,    48,    49,    50,    51,    52,
    45,    47,    42,   nil,    44,   nil,    46,    45,    47,    42,
   nil,    44,   nil,    46,   nil,   nil,    48,    49,    50,    51,
    52,   nil,   nil,    48,    49,    50,    51,    52,    45,    47,
    42,   nil,    44,   nil,    46,    45,    47,   nil,   nil,    44,
   nil,    46,   nil,   nil,    48,    49,    50,    51,    52,   nil,
   nil,    48,    49,    50,    51,    52,    45,    47,    42,   nil,
    44,   nil,    46,    45,    47,    42,   nil,    44,   nil,    46,
   nil,   nil,    48,    49,    50,    51,    52,   nil,   nil,    48,
    49,    50,    51,    52,    45,    47,    42,   nil,    44,   nil,
    46,    45,    47,    42,   nil,    44,   nil,    46,   nil,   nil,
    48,    49,    50,    51,    52,   nil,   nil,    48,    49,    50,
    51,    52,    45,    47,   nil,   nil,    44,   nil,    46,    45,
    47,    42,   nil,    44,   nil,    46,   nil,   nil,    48,    49,
    50,    51,    52,   nil,   nil,    48,    49,    50,    51,    52,
    45,    47,    42,   nil,    44,   nil,    46,    45,    47,   278,
   nil,    44,   nil,    46,   nil,   nil,    48,    49,    50,    51,
    52,   nil,   nil,    48,    49,    50,    51,    52,    45,    47,
   279,   nil,    44,   nil,    46,    45,    47,   281,   nil,    44,
   nil,    46,   nil,   nil,    48,    49,    50,    51,    52,   nil,
   nil,    48,    49,    50,    51,    52,    45,    47,    42,   nil,
    44,   nil,    46,    45,    47,    42,   nil,    44,   nil,    46,
   nil,   nil,    48,    49,    50,    51,    52,   nil,   nil,    48,
    49,    50,    51,    52,    45,    47,    42,   nil,    44,   nil,
    46,    45,    47,    42,   nil,    44,   nil,    46,   nil,   nil,
    48,    49,    50,    51,    52,   nil,   nil,    48,    49,    50,
    51,    52,    45,    47,    42,   nil,    44,   nil,    46,    45,
    47,   320,   nil,    44,   nil,    46,   nil,   nil,    48,    49,
    50,    51,    52,   119,   nil,    48,    49,    50,    51,    52,
   121,   255,   252,   121,   107,   120,   254,   107,   265,   124,
   nil,   286,   nil,   nil,   nil,   nil,   256,   nil,   121,   293,
   120,   121,   107,   120,   124,   107,   121,   124,   120,   121,
   107,   120,   124,   107,   nil,   124,   121,   255,   252,   nil,
   107,   nil,   254,   121,   255,   252,   nil,   107,   nil,   254,
   nil,   nil,   256,   nil,   121,   255,   120,   nil,   107,   256,
   254,   121,   255,   315,   nil,   107,   nil,   254,   nil,   nil,
   256,   nil,   176,   173,   174,   nil,   175,   256,   177,   186,
   188,   nil,   121,   185,   120,   187,   107,   121,   124,   120,
   121,   107,   120,   124,   107,   121,   124,   120,   nil,   107,
   nil,   124,   192,   276,   190,   121,   191,   120,   277,   107,
   nil,   124 ]

racc_action_check = [
    65,    65,     5,    58,     1,    58,    76,   130,   130,    76,
    15,    65,    65,    65,     9,    65,     9,    65,   130,   130,
   130,     5,   130,     5,   130,    17,    76,    65,    65,    65,
    65,    65,    18,     9,   130,   130,   130,   130,   130,     0,
     0,    10,     0,    75,    75,    19,    75,     0,    20,     0,
     0,     0,    24,     0,    92,     0,    92,     0,    10,     0,
   155,    39,     0,    75,    25,     0,     0,     0,     0,     0,
   155,   155,   155,    92,   155,   138,   155,   138,    39,    40,
    26,   229,    94,    95,   116,    95,   155,   155,   155,   155,
   155,   229,   229,   229,   138,   229,    40,   229,    53,    94,
   116,   116,    96,    61,    96,    70,    70,   229,   229,   229,
   229,   229,    70,   101,    70,    70,    70,    60,    70,    60,
    70,    60,    62,    60,   101,    68,   124,    70,   124,   101,
    70,    70,    70,    70,    70,    35,    69,    56,    35,    74,
    35,    35,    35,   127,    35,   127,    35,    56,    69,    56,
    69,    56,   161,    35,   161,    77,    35,    35,    35,    35,
    35,    36,   151,   170,    36,   170,    36,    36,    36,    54,
    36,    54,    36,    54,   151,   165,   151,    80,   171,    36,
   171,    81,    36,    36,    36,    36,    36,    28,    82,    28,
    28,   165,   165,    28,    90,    28,    90,    90,    90,   115,
    90,   115,    90,   115,    91,    28,    28,    28,    28,    28,
   219,    93,    90,    90,    90,    90,    90,   157,   102,   157,
   157,   157,   219,   157,   219,   157,   110,    97,   111,    97,
   112,    97,   157,    97,   118,   157,   157,   157,   157,   157,
   158,   119,   158,   158,   158,    98,   158,    98,   158,    98,
   128,    98,   128,   126,   128,   158,   128,   131,   158,   158,
   158,   158,   158,   270,   132,   270,   270,   270,   135,   270,
   136,   270,   137,    12,    12,    12,   148,    12,   270,    12,
   162,   270,   270,   270,   270,   270,   164,   166,   167,    12,
    12,    12,    12,    12,    13,    13,    13,   173,    13,   182,
    13,    38,    38,    38,   193,    38,   206,    38,   218,   223,
    13,    13,    13,    13,    13,   225,   227,    38,    38,    38,
    38,    38,    64,    64,    64,   230,    64,   235,    64,    66,
    66,   237,   241,    66,   243,    66,   250,   258,    64,    64,
    64,    64,    64,   261,   262,    66,    66,    66,    66,    66,
    71,    71,    71,   265,    71,   269,    71,    72,    72,   272,
   273,    72,   276,    72,   278,   279,    71,    71,    71,    71,
    71,   285,   286,    72,    72,    72,    72,    72,    73,    73,
    73,   288,    73,   289,    73,    78,    78,    78,   290,    78,
   293,    78,   295,   297,    73,    73,    73,    73,    73,   298,
   300,    78,    78,    78,    78,    78,   106,   106,   106,   305,
   106,   309,   106,   107,   107,   107,   312,   107,   313,   107,
   316,   317,   106,   106,   106,   106,   106,   318,   321,   107,
   107,   107,   107,   107,   114,   114,   nil,   nil,   114,   nil,
   114,   120,   120,   nil,   nil,   120,   nil,   120,   nil,   nil,
   114,   114,   114,   114,   114,   nil,   nil,   120,   120,   120,
   120,   120,   121,   121,   121,   nil,   121,   nil,   121,   129,
   129,   129,   nil,   129,   nil,   129,   nil,   nil,   121,   121,
   121,   121,   121,   nil,   nil,   129,   129,   129,   129,   129,
   133,   133,   133,   nil,   133,   nil,   133,   147,   147,   147,
   nil,   147,   nil,   147,   nil,   nil,   133,   133,   133,   133,
   133,   nil,   nil,   147,   147,   147,   147,   147,   149,   149,
   149,   nil,   149,   nil,   149,   150,   150,   nil,   nil,   150,
   nil,   150,   nil,   nil,   149,   149,   149,   149,   149,   nil,
   nil,   150,   150,   150,   150,   150,   152,   152,   152,   nil,
   152,   nil,   152,   153,   153,   153,   nil,   153,   nil,   153,
   nil,   nil,   152,   152,   152,   152,   152,   nil,   nil,   153,
   153,   153,   153,   153,   154,   154,   154,   nil,   154,   nil,
   154,   209,   209,   209,   nil,   209,   nil,   209,   nil,   nil,
   154,   154,   154,   154,   154,   nil,   nil,   209,   209,   209,
   209,   209,   220,   220,   nil,   nil,   220,   nil,   220,   221,
   221,   221,   nil,   221,   nil,   221,   nil,   nil,   220,   220,
   220,   220,   220,   nil,   nil,   221,   221,   221,   221,   221,
   222,   222,   222,   nil,   222,   nil,   222,   245,   245,   245,
   nil,   245,   nil,   245,   nil,   nil,   222,   222,   222,   222,
   222,   nil,   nil,   245,   245,   245,   245,   245,   249,   249,
   249,   nil,   249,   nil,   249,   252,   252,   252,   nil,   252,
   nil,   252,   nil,   nil,   249,   249,   249,   249,   249,   nil,
   nil,   252,   252,   252,   252,   252,   254,   254,   254,   nil,
   254,   nil,   254,   255,   255,   255,   nil,   255,   nil,   255,
   nil,   nil,   254,   254,   254,   254,   254,   nil,   nil,   255,
   255,   255,   255,   255,   256,   256,   256,   nil,   256,   nil,
   256,   267,   267,   267,   nil,   267,   nil,   267,   nil,   nil,
   256,   256,   256,   256,   256,   nil,   nil,   267,   267,   267,
   267,   267,   268,   268,   268,   nil,   268,   nil,   268,   315,
   315,   315,   nil,   315,   nil,   315,   nil,   nil,   268,   268,
   268,   268,   268,    59,   nil,   315,   315,   315,   315,   315,
   172,   172,   172,    59,   172,    59,   172,    59,   217,    59,
   nil,   259,   nil,   nil,   nil,   nil,   172,   nil,   217,   266,
   217,   259,   217,   259,   217,   259,   163,   259,   163,   266,
   163,   266,   163,   266,   nil,   266,   275,   275,   275,   nil,
   275,   nil,   275,   280,   280,   280,   nil,   280,   nil,   280,
   nil,   nil,   275,   nil,   301,   301,   301,   nil,   301,   280,
   301,   302,   302,   302,   nil,   302,   nil,   302,   nil,   nil,
   301,   nil,   104,   104,   104,   nil,   104,   302,   104,   113,
   113,   nil,   194,   113,   194,   113,   194,   195,   194,   195,
   238,   195,   238,   195,   238,   239,   238,   239,   nil,   239,
   nil,   239,   244,   244,   244,   260,   244,   260,   244,   260,
   nil,   260 ]

racc_action_pointer = [
    33,     4,   nil,   nil,   nil,     0,   nil,   nil,   nil,     2,
    27,   nil,   257,   278,   nil,   -11,   nil,    21,     9,    39,
    34,   nil,   nil,   nil,    31,    64,    80,   nil,   173,   nil,
   nil,   nil,   nil,   nil,   nil,   124,   150,   nil,   285,    47,
    65,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    98,   153,   nil,   131,   nil,   -15,   757,
   101,    89,   108,   nil,   306,    -5,   313,   nil,   119,   130,
    98,   334,   341,   362,   135,    32,    -5,   144,   369,   nil,
   152,   153,   160,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   180,   177,    42,   181,    68,    65,    84,   211,   229,   nil,
   nil,   110,   203,   nil,   826,   nil,   390,   397,   nil,   nil,
   214,   222,   218,   833,   418,   183,    70,   nil,   222,   235,
   425,   446,   nil,   nil,   108,   nil,   223,   125,   234,   453,
     2,   251,   259,   474,   nil,   262,   256,   266,    63,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   481,   272,   502,
   509,   156,   530,   537,   558,    54,   nil,   203,   226,   nil,
   nil,   134,   268,   780,   274,   161,   275,   258,   nil,   nil,
   145,   160,   754,   282,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   285,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   292,   836,   841,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   294,   nil,   nil,   565,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   772,   294,   204,
   586,   593,   614,   303,   nil,   301,   nil,   302,   nil,    75,
   297,   nil,   nil,   nil,   nil,   315,   nil,   319,   844,   849,
   nil,   320,   nil,   319,   856,   621,   nil,   nil,   nil,   642,
   321,   nil,   649,   nil,   670,   677,   698,   nil,   319,   775,
   859,   313,   314,   nil,   nil,   347,   783,   705,   726,   341,
   249,   nil,   329,   330,   nil,   790,   347,   nil,   349,   350,
   797,   nil,   nil,   nil,   nil,   353,   366,   nil,   369,   371,
   376,   nil,   nil,   384,   nil,   386,   nil,   381,   387,   nil,
   382,   808,   815,   nil,   nil,   394,   nil,   nil,   nil,   381,
   nil,   nil,   386,   400,   nil,   733,   402,   409,   415,   nil,
   nil,   410,   nil,   nil,   nil ]

racc_action_default = [
  -178,  -178,    -1,    -2,    -3,    -4,    -5,    -6,    -7,    -8,
    -9,   -10,  -178,  -178,   -34,   -35,   -36,   -37,   -38,  -178,
   -40,   -41,   -42,   -43,  -178,   -51,   -53,   -54,  -178,   -66,
   -69,   -70,   -71,   -72,   -73,  -178,  -178,  -109,  -178,  -111,
  -112,  -113,  -130,  -131,  -132,  -133,  -134,  -135,  -136,  -137,
  -138,  -139,  -140,  -178,  -178,   -78,  -178,  -114,  -178,  -178,
  -178,    -8,    -9,   -11,  -178,  -178,  -178,   -74,  -178,  -178,
  -178,   -57,  -178,  -172,  -178,    -8,    -9,   -10,  -178,   -40,
  -178,   -83,   -88,   -89,   -90,   -92,   -93,   -94,   -95,   -96,
  -178,  -178,  -178,  -178,  -178,  -178,  -178,  -178,  -178,   325,
   -12,   -13,  -178,   -16,  -178,   -31,  -178,  -178,  -154,   -27,
   -29,  -178,  -128,  -178,  -178,  -178,  -178,   -28,   -30,  -178,
  -178,  -178,  -155,  -162,  -178,  -164,  -178,  -178,  -178,  -178,
  -178,  -178,  -178,   -75,  -176,  -178,  -178,  -178,    -8,   -49,
   -50,   -51,   -52,   -53,   -55,   -56,   -60,   -58,  -178,  -173,
  -178,  -178,  -100,   -99,   -98,  -178,   -81,  -178,  -178,   -97,
   -82,  -178,  -178,  -178,  -128,  -178,  -128,  -178,   -14,   -18,
  -178,  -178,  -178,  -178,  -149,  -150,  -151,  -152,  -147,  -153,
  -148,  -116,   -46,   -61,  -129,   -62,   -63,   -64,   -65,  -141,
  -142,  -143,  -144,  -178,  -178,  -178,  -122,   -47,  -156,  -157,
  -158,  -159,  -160,  -161,  -163,  -165,  -178,   -29,   -30,  -178,
   -26,   -44,   -79,   -45,   -80,  -177,   -39,  -178,  -178,  -178,
  -178,  -174,   -76,  -178,  -103,  -178,  -102,  -178,  -101,  -178,
   -85,   -86,   -87,   -91,  -110,  -178,  -115,  -178,  -178,  -178,
  -119,  -178,   -19,  -178,  -178,  -178,  -145,   -20,   -21,  -178,
  -178,   -32,  -178,  -166,  -178,  -178,  -178,  -171,  -178,  -178,
  -117,  -178,  -178,  -123,  -104,  -178,  -178,   -77,  -175,   -46,
  -178,  -118,  -178,  -178,  -120,  -178,  -178,  -146,  -178,  -178,
  -178,  -170,  -167,  -168,  -169,  -178,  -178,  -108,  -128,  -178,
  -178,  -107,  -105,  -178,   -59,  -178,   -84,  -178,  -178,   -23,
  -178,  -178,  -178,   -15,   -33,  -178,   -48,  -121,  -124,  -178,
  -106,  -126,  -178,  -178,   -25,  -178,  -178,  -178,  -178,   -24,
   -22,  -178,  -125,  -127,   -17 ]

racc_goto_table = [
    73,    13,   183,    11,   233,     5,   133,   118,   126,   253,
     9,   231,   232,    10,    65,    11,   250,    15,    20,    24,
    71,    25,    61,     1,    26,    62,    74,   242,   248,     2,
   116,   314,   314,   246,   246,     3,    78,    78,   134,    80,
    91,   136,     4,     6,    73,   166,   167,    63,    92,   100,
   101,    94,   168,   102,   236,   303,   240,   103,   247,   105,
   304,    14,    16,    17,   147,   129,   130,   164,   165,    18,
   148,    78,   146,    11,   149,   140,   208,   139,   178,   155,
   138,   112,    29,    10,    30,    31,   189,   142,    20,   144,
   222,   141,   178,    11,   143,   159,    32,    33,    34,   207,
    61,   230,    93,    62,   108,   nil,   nil,   nil,   180,   nil,
   nil,   235,   253,   nil,   nil,   nil,   233,   253,   nil,   299,
   nil,   nil,   134,   nil,   296,   nil,   nil,   nil,   nil,   nil,
   209,   210,   nil,   nil,   215,   nil,   nil,   nil,   253,   253,
   nil,   nil,   261,   262,   nil,   nil,   nil,   nil,   146,   nil,
   221,   nil,   nil,   nil,   nil,   nil,   229,   228,    78,    78,
   267,   nil,   224,   225,   225,   264,   226,   227,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   307,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   272,   273,   nil,   nil,
   nil,   nil,   134,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   287,   288,   nil,
   210,   nil,   nil,   nil,   292,   nil,   nil,   189,   nil,   nil,
   nil,   189,   268,   215,   178,   nil,   nil,   nil,   nil,   nil,
   210,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   282,   283,   284,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   215,   294,
   nil,    78,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   178 ]

racc_goto_check = [
    44,    23,    46,    11,    59,     5,    53,    26,    26,    67,
     9,    58,    58,    10,    23,    11,    16,    31,    35,    39,
    43,    41,     9,     1,    42,    10,    54,    19,    19,     2,
    24,    22,    22,    25,    25,     3,    23,    23,    44,    55,
    55,    24,     4,     6,    44,    26,    26,     7,     9,    12,
    13,    10,    14,    15,    46,    17,    46,    18,    20,    28,
    29,    30,    32,    33,    43,    23,    23,    24,    24,    34,
    54,    23,    23,    11,    23,     5,    26,    40,    44,    23,
     9,    45,    47,    10,    48,    49,    44,    31,    35,    39,
    53,    41,    44,    11,    42,     5,    50,    51,    52,    24,
     9,    57,    62,    10,    66,   nil,   nil,   nil,    23,   nil,
   nil,    26,    67,   nil,   nil,   nil,    59,    67,   nil,    16,
   nil,   nil,    44,   nil,    58,   nil,   nil,   nil,   nil,   nil,
    23,    23,   nil,   nil,    23,   nil,   nil,   nil,    67,    67,
   nil,   nil,    26,    26,   nil,   nil,   nil,   nil,    23,   nil,
    23,   nil,   nil,   nil,   nil,   nil,    23,    11,    23,    23,
    53,   nil,     9,     9,     9,    26,    10,    10,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    46,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    26,    26,   nil,   nil,
   nil,   nil,    44,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    26,    26,   nil,
    23,   nil,   nil,   nil,    26,   nil,   nil,    44,   nil,   nil,
   nil,    44,    23,    23,    44,   nil,   nil,   nil,   nil,   nil,
    23,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    23,    23,    23,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    23,    23,
   nil,    23,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    44 ]

racc_goto_pointer = [
   nil,    23,    29,    35,    42,     5,    43,    35,   nil,    10,
    13,     3,    -5,    -4,   -49,    -1,  -156,  -225,     3,  -143,
  -113,   nil,  -270,     1,   -28,  -137,   -52,   nil,     5,  -220,
    61,    17,    62,    63,    69,    18,   nil,   nil,   nil,    19,
     7,    21,    24,    -8,   -28,    25,  -110,    82,    84,    85,
    96,    97,    98,   -60,    -2,     4,   nil,   -56,  -146,  -154,
   nil,   nil,    64,   nil,   nil,   nil,    50,  -163,   nil ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,    87,   nil,     7,     8,    75,
    76,    77,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   243,   257,    64,   110,   109,   nil,   117,   nil,   251,
   nil,    89,   nil,   nil,   nil,    79,    21,    22,    23,   nil,
   nil,    88,   nil,   nil,    43,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    81,    82,    83,    84,
    85,    86,    37,    39,    40,    41,   122,   123,   125 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 38, :_reduce_none,
  1, 38, :_reduce_none,
  1, 38, :_reduce_none,
  1, 39, :_reduce_none,
  1, 39, :_reduce_none,
  1, 42, :_reduce_none,
  1, 42, :_reduce_none,
  1, 44, :_reduce_8,
  1, 44, :_reduce_9,
  1, 44, :_reduce_10,
  2, 45, :_reduce_11,
  3, 43, :_reduce_12,
  1, 49, :_reduce_none,
  2, 49, :_reduce_14,
  5, 50, :_reduce_15,
  1, 50, :_reduce_none,
  8, 55, :_reduce_17,
  1, 51, :_reduce_18,
  2, 51, :_reduce_19,
  2, 51, :_reduce_20,
  1, 57, :_reduce_none,
  5, 57, :_reduce_22,
  3, 56, :_reduce_23,
  5, 56, :_reduce_24,
  4, 56, :_reduce_25,
  4, 46, :_reduce_26,
  1, 61, :_reduce_none,
  1, 63, :_reduce_none,
  3, 47, :_reduce_29,
  3, 48, :_reduce_30,
  1, 52, :_reduce_none,
  1, 53, :_reduce_none,
  1, 54, :_reduce_none,
  1, 40, :_reduce_none,
  1, 40, :_reduce_none,
  1, 40, :_reduce_none,
  1, 40, :_reduce_none,
  1, 40, :_reduce_none,
  4, 67, :_reduce_39,
  1, 68, :_reduce_40,
  1, 68, :_reduce_none,
  1, 68, :_reduce_none,
  1, 68, :_reduce_none,
  4, 72, :_reduce_44,
  4, 72, :_reduce_45,
  4, 73, :_reduce_46,
  4, 74, :_reduce_47,
  7, 75, :_reduce_48,
  3, 69, :_reduce_49,
  1, 76, :_reduce_none,
  1, 76, :_reduce_none,
  1, 76, :_reduce_none,
  1, 76, :_reduce_none,
  1, 76, :_reduce_none,
  1, 77, :_reduce_none,
  1, 77, :_reduce_none,
  2, 70, :_reduce_57,
  3, 70, :_reduce_58,
  5, 80, :_reduce_59,
  2, 80, :_reduce_60,
  4, 71, :_reduce_61,
  2, 82, :_reduce_62,
  2, 82, :_reduce_63,
  2, 82, :_reduce_64,
  2, 82, :_reduce_65,
  1, 41, :_reduce_none,
  1, 41, :_reduce_none,
  1, 41, :_reduce_none,
  1, 41, :_reduce_none,
  1, 41, :_reduce_none,
  1, 41, :_reduce_none,
  1, 41, :_reduce_none,
  1, 41, :_reduce_none,
  2, 84, :_reduce_74,
  3, 89, :_reduce_75,
  4, 89, :_reduce_76,
  5, 89, :_reduce_77,
  2, 88, :_reduce_78,
  4, 87, :_reduce_79,
  4, 87, :_reduce_80,
  3, 85, :_reduce_81,
  3, 86, :_reduce_82,
  1, 92, :_reduce_83,
  5, 92, :_reduce_84,
  3, 92, :_reduce_85,
  3, 92, :_reduce_86,
  3, 92, :_reduce_87,
  1, 92, :_reduce_88,
  1, 92, :_reduce_89,
  1, 94, :_reduce_90,
  3, 94, :_reduce_91,
  1, 96, :_reduce_none,
  1, 96, :_reduce_none,
  1, 97, :_reduce_none,
  1, 97, :_reduce_none,
  1, 97, :_reduce_none,
  2, 93, :_reduce_97,
  2, 95, :_reduce_98,
  2, 95, :_reduce_99,
  2, 95, :_reduce_100,
  3, 98, :_reduce_101,
  3, 98, :_reduce_102,
  3, 98, :_reduce_103,
  5, 79, :_reduce_104,
  6, 79, :_reduce_105,
  7, 79, :_reduce_106,
  6, 79, :_reduce_107,
  6, 79, :_reduce_108,
  1, 78, :_reduce_none,
  4, 78, :_reduce_110,
  1, 99, :_reduce_111,
  1, 99, :_reduce_112,
  1, 99, :_reduce_113,
  2, 100, :_reduce_114,
  4, 101, :_reduce_115,
  4, 101, :_reduce_116,
  5, 101, :_reduce_117,
  5, 101, :_reduce_118,
  4, 102, :_reduce_119,
  5, 102, :_reduce_120,
  7, 102, :_reduce_121,
  4, 102, :_reduce_122,
  5, 102, :_reduce_123,
  7, 102, :_reduce_124,
  9, 102, :_reduce_125,
  7, 102, :_reduce_126,
  9, 102, :_reduce_127,
  0, 83, :_reduce_128,
  1, 83, :_reduce_none,
  1, 60, :_reduce_130,
  1, 60, :_reduce_none,
  1, 81, :_reduce_none,
  1, 81, :_reduce_none,
  1, 81, :_reduce_none,
  1, 81, :_reduce_none,
  1, 81, :_reduce_none,
  1, 81, :_reduce_none,
  1, 81, :_reduce_none,
  1, 81, :_reduce_none,
  1, 81, :_reduce_none,
  2, 62, :_reduce_141,
  2, 62, :_reduce_142,
  2, 62, :_reduce_143,
  2, 62, :_reduce_144,
  1, 58, :_reduce_none,
  2, 58, :_reduce_146,
  2, 103, :_reduce_147,
  2, 103, :_reduce_148,
  2, 103, :_reduce_149,
  2, 103, :_reduce_150,
  2, 103, :_reduce_151,
  2, 103, :_reduce_152,
  2, 65, :_reduce_none,
  1, 65, :_reduce_none,
  1, 104, :_reduce_none,
  2, 104, :_reduce_156,
  2, 104, :_reduce_157,
  2, 104, :_reduce_158,
  2, 104, :_reduce_159,
  2, 104, :_reduce_160,
  2, 104, :_reduce_161,
  1, 105, :_reduce_none,
  2, 105, :_reduce_163,
  1, 64, :_reduce_none,
  2, 64, :_reduce_165,
  1, 59, :_reduce_none,
  2, 59, :_reduce_167,
  2, 59, :_reduce_168,
  2, 59, :_reduce_169,
  2, 66, :_reduce_none,
  1, 66, :_reduce_none,
  1, 91, :_reduce_172,
  2, 91, :_reduce_173,
  3, 91, :_reduce_174,
  4, 91, :_reduce_175,
  1, 90, :_reduce_176,
  2, 90, :_reduce_177 ]

racc_reduce_n = 178

racc_shift_n = 325

racc_token_table = {
  false => 0,
  :error => 1,
  :T => 2,
  :Z => 3,
  :E => 4,
  :X => 5,
  :U => 6,
  :UNKNOWN => 7,
  :OPEN => 8,
  :LONGYEAR => 9,
  :UNMATCHED => 10,
  :DOTS => 11,
  :UA => 12,
  :PUA => 13,
  "-" => 14,
  ":" => 15,
  "2" => 16,
  "4" => 17,
  "0" => 18,
  "+" => 19,
  "1" => 20,
  "/" => 21,
  "3" => 22,
  "^" => 23,
  "[" => 24,
  "]" => 25,
  "{" => 26,
  "}" => 27,
  "," => 28,
  "(" => 29,
  ")" => 30,
  "-(" => 31,
  "5" => 32,
  "6" => 33,
  "7" => 34,
  "8" => 35,
  "9" => 36 }

racc_nt_base = 37

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "T",
  "Z",
  "E",
  "X",
  "U",
  "UNKNOWN",
  "OPEN",
  "LONGYEAR",
  "UNMATCHED",
  "DOTS",
  "UA",
  "PUA",
  "\"-\"",
  "\":\"",
  "\"2\"",
  "\"4\"",
  "\"0\"",
  "\"+\"",
  "\"1\"",
  "\"/\"",
  "\"3\"",
  "\"^\"",
  "\"[\"",
  "\"]\"",
  "\"{\"",
  "\"}\"",
  "\",\"",
  "\"(\"",
  "\")\"",
  "\"-(\"",
  "\"5\"",
  "\"6\"",
  "\"7\"",
  "\"8\"",
  "\"9\"",
  "$start",
  "edtf",
  "level_0_expression",
  "level_1_expression",
  "level_2_expression",
  "date",
  "date_time",
  "positive_date",
  "negative_date",
  "year",
  "year_month",
  "year_month_day",
  "time",
  "base_time",
  "zone_offset",
  "hour",
  "minute",
  "second",
  "midnight",
  "zone_offset_hour",
  "positive_zone_offset",
  "d01_13",
  "d01_59",
  "digit",
  "month",
  "d01_12",
  "day",
  "d01_31",
  "d00_23",
  "d00_59",
  "unknown",
  "unspecified",
  "level_1_interval",
  "long_year_simple",
  "season",
  "unspecified_year",
  "unspecified_month",
  "unspecified_day",
  "unspecified_day_and_month",
  "level_1_start",
  "level_1_end",
  "partial_uncertain_or_approximate",
  "partial_unspecified",
  "long_year",
  "positive_digit",
  "season_number",
  "ua",
  "season_qualified",
  "choice_list",
  "inclusive_list",
  "masked_precision",
  "date_and_calendar",
  "long_year_scientific",
  "integer",
  "int1_4",
  "list",
  "earlier",
  "list_elements",
  "later",
  "list_element",
  "atomic",
  "consecutives",
  "pua_base",
  "pua_year",
  "pua_year_month",
  "pua_year_month_day",
  "d01_23",
  "d01_29",
  "d01_30" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

# reduce 2 omitted

# reduce 3 omitted

# reduce 4 omitted

# reduce 5 omitted

# reduce 6 omitted

# reduce 7 omitted

module_eval(<<'.,.,', 'parser.y', 27)
  def _reduce_8(val, _values, result)
     result = Date.new(val[0]).year_precision! 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 28)
  def _reduce_9(val, _values, result)
     result = Date.new(*val.flatten).month_precision! 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 29)
  def _reduce_10(val, _values, result)
     result = Date.new(*val.flatten).day_precision! 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 32)
  def _reduce_11(val, _values, result)
     result = -val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 36)
  def _reduce_12(val, _values, result)
        result = DateTime.new(val[0].year, val[0].month, val[0].day, *val[2])
    result.skip_timezone = (val[2].length == 3)
  
    result
  end
.,.,

# reduce 13 omitted

module_eval(<<'.,.,', 'parser.y', 41)
  def _reduce_14(val, _values, result)
     result = val.flatten 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 43)
  def _reduce_15(val, _values, result)
     result = val.values_at(0, 2, 4) 
    result
  end
.,.,

# reduce 16 omitted

module_eval(<<'.,.,', 'parser.y', 46)
  def _reduce_17(val, _values, result)
     result = [24, 0, 0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 48)
  def _reduce_18(val, _values, result)
     result = 0 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 49)
  def _reduce_19(val, _values, result)
     result = -1 * val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 50)
  def _reduce_20(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 21 omitted

module_eval(<<'.,.,', 'parser.y', 54)
  def _reduce_22(val, _values, result)
     result = 0 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 58)
  def _reduce_23(val, _values, result)
     result = Rational(val[0] * 60 + val[2], 1440) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 59)
  def _reduce_24(val, _values, result)
     result = Rational(840, 1440) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 60)
  def _reduce_25(val, _values, result)
     result = Rational(val[3], 1440) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 64)
  def _reduce_26(val, _values, result)
        result = val.zip([1000,100,10,1]).reduce(0) { |s,(a,b)| s += a * b }
  
    result
  end
.,.,

# reduce 27 omitted

# reduce 28 omitted

module_eval(<<'.,.,', 'parser.y', 70)
  def _reduce_29(val, _values, result)
     result = [val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 77)
  def _reduce_30(val, _values, result)
        result = val[0] << val[2]
    if result[2] > 31 || (result[2] > 30 && [2,4,6,9,11].include?(result[1])) || (result[2] > 29 && result[1] == 2)
      raise ArgumentError, "invalid date (invalid days #{result[2]} for month #{result[1]})"
    end
  
    result
  end
.,.,

# reduce 31 omitted

# reduce 32 omitted

# reduce 33 omitted

# reduce 34 omitted

# reduce 35 omitted

# reduce 36 omitted

# reduce 37 omitted

# reduce 38 omitted

module_eval(<<'.,.,', 'parser.y', 96)
  def _reduce_39(val, _values, result)
     result = EDTF::Unknown.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 102)
  def _reduce_40(val, _values, result)
                    result = Date.new(val[0][0]).year_precision!
                result.unspecified.year[2,2] = val[0][1]
              
    result
  end
.,.,

# reduce 41 omitted

# reduce 42 omitted

# reduce 43 omitted

module_eval(<<'.,.,', 'parser.y', 113)
  def _reduce_44(val, _values, result)
          result = [val[0,3].zip([1000,100,10]).reduce(0) { |s,(a,b)| s += a * b }, [false,true]]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 117)
  def _reduce_45(val, _values, result)
          result = [val[0,2].zip([1000,100]).reduce(0) { |s,(a,b)| s += a * b }, [true, true]]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 121)
  def _reduce_46(val, _values, result)
        result = Date.new(val[0]).unspecified!(:month)
    result.precision = :month
  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 126)
  def _reduce_47(val, _values, result)
        result = Date.new(*val[0]).unspecified!(:day)
  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 130)
  def _reduce_48(val, _values, result)
        result = Date.new(val[0]).unspecified!([:day,:month])
  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 135)
  def _reduce_49(val, _values, result)
        result = Interval.new(val[0], val[2])
  
    result
  end
.,.,

# reduce 50 omitted

# reduce 51 omitted

# reduce 52 omitted

# reduce 53 omitted

# reduce 54 omitted

# reduce 55 omitted

# reduce 56 omitted

module_eval(<<'.,.,', 'parser.y', 146)
  def _reduce_57(val, _values, result)
          result = Date.new(val[1])
      result.precision = :year
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 151)
  def _reduce_58(val, _values, result)
          result = Date.new(-1 * val[2])
      result.precision = :year
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 158)
  def _reduce_59(val, _values, result)
          result = val.zip([10000,1000,100,10,1]).reduce(0) { |s,(a,b)| s += a * b }
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 160)
  def _reduce_60(val, _values, result)
     result = 10 * val[0] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 165)
  def _reduce_61(val, _values, result)
        result = Season.new(val[0], val[2])
    val[3].each { |ua| result.send(ua) }
  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 169)
  def _reduce_62(val, _values, result)
     result = 21 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 170)
  def _reduce_63(val, _values, result)
     result = 22 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 171)
  def _reduce_64(val, _values, result)
     result = 23 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 172)
  def _reduce_65(val, _values, result)
     result = 24 
    result
  end
.,.,

# reduce 66 omitted

# reduce 67 omitted

# reduce 68 omitted

# reduce 69 omitted

# reduce 70 omitted

# reduce 71 omitted

# reduce 72 omitted

# reduce 73 omitted

module_eval(<<'.,.,', 'parser.y', 190)
  def _reduce_74(val, _values, result)
     result = val[0]; result.qualifier = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 196)
  def _reduce_75(val, _values, result)
          result = Date.new(val[0].year * 10 ** val[2]).year_precision!
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 200)
  def _reduce_76(val, _values, result)
          result = Date.new(val[1] * 10 ** val[3]).year_precision!
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 204)
  def _reduce_77(val, _values, result)
          result = Date.new(-1 * val[2] * 10 ** val[4]).year_precision!
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 209)
  def _reduce_78(val, _values, result)
     result = val[0]; result.calendar = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 215)
  def _reduce_79(val, _values, result)
          d = val[0,3].zip([1000,100,10]).reduce(0) { |s,(a,b)| s += a * b }
      result = EDTF::Decade.new(d)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 220)
  def _reduce_80(val, _values, result)
          d = val[0,2].zip([1000,100]).reduce(0) { |s,(a,b)| s += a * b }
      result = EDTF::Century.new(d)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 226)
  def _reduce_81(val, _values, result)
     result = val[1].choice! 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 228)
  def _reduce_82(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 230)
  def _reduce_83(val, _values, result)
     result = EDTF::Set.new(val[0]).earlier! 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 231)
  def _reduce_84(val, _values, result)
     result = EDTF::Set.new([val[0]] + val[2] + [val[4]]).earlier!.later! 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 232)
  def _reduce_85(val, _values, result)
     result = EDTF::Set.new([val[0]] + val[2]).earlier! 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 233)
  def _reduce_86(val, _values, result)
     result = EDTF::Set.new([val[0]] + [val[2]]).earlier!.later! 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 234)
  def _reduce_87(val, _values, result)
     result = EDTF::Set.new(val[0] + [val[2]]).later! 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 235)
  def _reduce_88(val, _values, result)
     result = EDTF::Set.new(*val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 236)
  def _reduce_89(val, _values, result)
     result = EDTF::Set.new(val[0]).later! 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 239)
  def _reduce_90(val, _values, result)
     result = [val[0]].flatten 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 240)
  def _reduce_91(val, _values, result)
     result = val[0] + [val[2]].flatten 
    result
  end
.,.,

# reduce 92 omitted

# reduce 93 omitted

# reduce 94 omitted

# reduce 95 omitted

# reduce 96 omitted

module_eval(<<'.,.,', 'parser.y', 252)
  def _reduce_97(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 254)
  def _reduce_98(val, _values, result)
     result = Date.new(*val[0]).year_precision! 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 255)
  def _reduce_99(val, _values, result)
     result = Date.new(*val[0]).month_precision! 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 256)
  def _reduce_100(val, _values, result)
     result = Date.new(val[0]).year_precision! 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 259)
  def _reduce_101(val, _values, result)
     result = (Date.new(val[0]).day_precision! .. Date.new(val[2]).day_precision!) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 260)
  def _reduce_102(val, _values, result)
     result = (Date.new(val[0]).month_precision! .. Date.new(val[2]).month_precision!) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 261)
  def _reduce_103(val, _values, result)
     result = (Date.new(val[0]).year_precision! .. Date.new(val[2]).year_precision!) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 267)
  def _reduce_104(val, _values, result)
          result = Date.new(val[0][0], val[2], val[4])
      result.unspecified.year[2,2] = val[0][1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 272)
  def _reduce_105(val, _values, result)
          result = Date.new(val[0][0], 1, val[5])
      result.unspecified.year[2,2] = val[0][1]
      result.unspecified!(:month)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 278)
  def _reduce_106(val, _values, result)
          result = Date.new(val[0][0], 1, 1)
      result.unspecified.year[2,2] = val[0][1]
      result.unspecified!([:month, :day])
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 284)
  def _reduce_107(val, _values, result)
          result = Date.new(val[0][0], val[2], 1)
      result.unspecified.year[2,2] = val[0][1]
      result.unspecified!(:day)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 290)
  def _reduce_108(val, _values, result)
          result = Date.new(val[0], 1, val[5])
      result.unspecified!(:month)
    
    result
  end
.,.,

# reduce 109 omitted

module_eval(<<'.,.,', 'parser.y', 297)
  def _reduce_110(val, _values, result)
     result = uoa(val[1], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 300)
  def _reduce_111(val, _values, result)
     result = val[0].year_precision! 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 301)
  def _reduce_112(val, _values, result)
     result = val[0][0].month_precision! 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 302)
  def _reduce_113(val, _values, result)
     result = val[0].day_precision! 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 304)
  def _reduce_114(val, _values, result)
     result = uoa(Date.new(val[0]), val[1], :year) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 308)
  def _reduce_115(val, _values, result)
          result = [uoa(val[0].change(:month => val[2]), val[3], [:month, :year])]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 311)
  def _reduce_116(val, _values, result)
            result = [uoa(Date.new(val[0], val[2]), val[3], [:year, :month])]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 314)
  def _reduce_117(val, _values, result)
            result = [uoa(Date.new(val[0], val[2]), val[4], [:month]), true]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 317)
  def _reduce_118(val, _values, result)
            result = [uoa(val[0].change(:month => val[2]), val[4], [:month]), true]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 323)
  def _reduce_119(val, _values, result)
          result = uoa(val[0][0].change(:day => val[2]), val[3], val[0][1] ? [:day] : nil)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 326)
  def _reduce_120(val, _values, result)
            result = uoa(val[0][0].change(:day => val[2]), val[4], [:day])
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 329)
  def _reduce_121(val, _values, result)
            result = uoa(uoa(Date.new(val[0], val[2], val[5]), val[4], :month), val[6], :day)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 332)
  def _reduce_122(val, _values, result)
            result = uoa(Date.new(val[0][0], val[0][1], val[2]), val[3])
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 335)
  def _reduce_123(val, _values, result)
            result = uoa(Date.new(val[0][0], val[0][1], val[2]), val[4], [:day])
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 338)
  def _reduce_124(val, _values, result)
            result = uoa(Date.new(val[0], val[2], val[4]), val[6], [:month, :day])
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 341)
  def _reduce_125(val, _values, result)
            result = Date.new(val[0], val[2], val[4])
        result = uoa(result, val[6], [:day])
        result = uoa(result, val[8], [:month, :day])
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 346)
  def _reduce_126(val, _values, result)
            result = val[0].change(:month => val[2], :day => val[4])
        result = uoa(result, val[6], [:month, :day])
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 350)
  def _reduce_127(val, _values, result)
            result = val[0].change(:month => val[2], :day => val[4])
        result = uoa(result, val[6], [:day])
        result = uoa(result, val[8], [:month, :day])
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 361)
  def _reduce_128(val, _values, result)
     result = [] 
    result
  end
.,.,

# reduce 129 omitted

module_eval(<<'.,.,', 'parser.y', 365)
  def _reduce_130(val, _values, result)
     result = 0 
    result
  end
.,.,

# reduce 131 omitted

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

module_eval(<<'.,.,', 'parser.y', 371)
  def _reduce_141(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 372)
  def _reduce_142(val, _values, result)
     result = 10 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 373)
  def _reduce_143(val, _values, result)
     result = 11 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 374)
  def _reduce_144(val, _values, result)
     result = 12 
    result
  end
.,.,

# reduce 145 omitted

module_eval(<<'.,.,', 'parser.y', 378)
  def _reduce_146(val, _values, result)
     result = 13 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 381)
  def _reduce_147(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 382)
  def _reduce_148(val, _values, result)
     result = 10 + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 383)
  def _reduce_149(val, _values, result)
     result = 20 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 384)
  def _reduce_150(val, _values, result)
     result = 21 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 385)
  def _reduce_151(val, _values, result)
     result = 22 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 386)
  def _reduce_152(val, _values, result)
     result = 23 
    result
  end
.,.,

# reduce 153 omitted

# reduce 154 omitted

# reduce 155 omitted

module_eval(<<'.,.,', 'parser.y', 394)
  def _reduce_156(val, _values, result)
     result = 24 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 395)
  def _reduce_157(val, _values, result)
     result = 25 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 396)
  def _reduce_158(val, _values, result)
     result = 26 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 397)
  def _reduce_159(val, _values, result)
     result = 27 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 398)
  def _reduce_160(val, _values, result)
     result = 28 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 399)
  def _reduce_161(val, _values, result)
     result = 29 
    result
  end
.,.,

# reduce 162 omitted

module_eval(<<'.,.,', 'parser.y', 403)
  def _reduce_163(val, _values, result)
     result = 30 
    result
  end
.,.,

# reduce 164 omitted

module_eval(<<'.,.,', 'parser.y', 407)
  def _reduce_165(val, _values, result)
     result = 31 
    result
  end
.,.,

# reduce 166 omitted

module_eval(<<'.,.,', 'parser.y', 411)
  def _reduce_167(val, _values, result)
     result = 30 + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 412)
  def _reduce_168(val, _values, result)
     result = 40 + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 413)
  def _reduce_169(val, _values, result)
     result = 50 + val[1] 
    result
  end
.,.,

# reduce 170 omitted

# reduce 171 omitted

module_eval(<<'.,.,', 'parser.y', 420)
  def _reduce_172(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 421)
  def _reduce_173(val, _values, result)
     result = 10 * val[0] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 424)
  def _reduce_174(val, _values, result)
               result = val.zip([100,10,1]).reduce(0) { |s,(a,b)| s += a * b }
         
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 428)
  def _reduce_175(val, _values, result)
               result = val.zip([1000,100,10,1]).reduce(0) { |s,(a,b)| s += a * b }
         
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 432)
  def _reduce_176(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 433)
  def _reduce_177(val, _values, result)
     result = 10 * val[0] + val[1] 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module EDTF
