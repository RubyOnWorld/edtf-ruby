#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.6
# from Racc grammer file "".
#

require 'racc/parser.rb'

require 'strscan'

module EDTF
  class Parser < Racc::Parser

module_eval(<<'...end parser.y/module_eval...', 'parser.y', 222)

  @defaults = {
    :level => 2,
    :debug => false
  }
  
  class << self; attr_reader :defaults; end
  
  attr_reader :options
  
  def initialize(options = {})
    @options = Parser.defaults.merge(options)
  end
  
  def parse(input)
    @yydebug = @options[:debug] || ENV['DEBUG']
    scan(input)
    do_parse
  end
  
  def next_token
    @stack.shift
  end

  def on_error(tid, val, vstack)
    warn "failed to parse extended date time %s (%s) %s" % [val.inspect, token_to_str(tid) || '?', vstack.inspect]
  end

  def scan(input)
    @src = StringScanner.new(input)
    @stack = []
    tokenize
  end

  private

  def tokenize
    until @src.eos?
      case
      when @src.scan(/\(/)
        @stack << [:LP, @src.matched]
      when @src.scan(/\)/)
        @stack << [:RP, @src.matched]
      when @src.scan(/T/)
        @stack << [:T, @src.matched]
      when @src.scan(/Z/)
        @stack << [:Z, @src.matched]
      when @src.scan(/\?/)
        @stack << [:UNCERTAIN, @src.matched]
      when @src.scan(/~/)
        @stack << [:APPROXIMATE, @src.matched]
      when @src.scan(/open/i)
        @stack << [:OPEN, @src.matched]
      when @src.scan(/unkn?own/i) # matches 'unkown' typo too
        @stack << [:UNKNOWN, @src.matched]
      when @src.scan(/u/)
        @stack << [:UNSPECIFIED, @src.matched]
      when @src.scan(/y/)
        @stack << [:LONGYEAR, @src.matched]
      when @src.scan(/e/)
        @stack << [:E, @src.matched]
      when @src.scan(/\+/)
        @stack << [:PLUS, @src.matched]
      when @src.scan(/-/)
        @stack << [:MINUS, @src.matched]
      when @src.scan(/:/)
        @stack << [:COLON, @src.matched]
      when @src.scan(/\//)
        @stack << [:SLASH, @src.matched]
      when @src.scan(/\^\w+/)
        @stack << [:CARET, @src.matched[1..-1]]
      when @src.scan(/\d/)
        @stack << [['D', @src.matched].join.intern, @src.matched]
      else @src.scan(/./)
        @stack << [:UNMATCHED, @src.rest]
      end
    end
  
    @stack
  end


# -*- racc -*-
...end parser.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
    12,   130,   131,    28,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    40,    78,    66,    79,    82,    24,   -52,
    25,   150,    66,    79,   152,   153,   154,   102,    77,   104,
   103,    12,    42,    43,    28,    30,    31,    32,    33,    34,
    35,    36,    37,    38,   120,   121,   122,   162,   161,    24,
    95,    28,    30,    31,    32,    33,    34,    35,    36,    37,
    38,   160,    74,    75,    73,   134,    28,    30,    31,    32,
    33,    34,    35,    36,    37,    38,    71,    55,   143,   142,
    88,    30,    31,    32,    33,    34,    35,    36,    37,    38,
    28,    30,    31,    32,    33,    34,    35,    36,    37,    38,
    28,    30,    31,    32,    33,    34,    35,    36,    37,    38,
   166,    30,    31,    32,    33,    34,    35,    36,    37,    38,
    28,    30,    31,    32,    33,    34,    35,    36,    37,    38,
   164,    30,    31,    32,    33,    34,    35,    36,    37,    38,
   163,    30,    31,    32,    33,    34,    35,    36,    37,    38,
    28,    30,    31,    32,    33,    34,    35,    36,    37,    38,
    28,    30,    31,    32,    33,    34,    35,    36,    37,    38,
    28,    30,    31,    32,    33,    34,    35,    36,    37,    38,
    28,    30,    31,    32,    33,    34,    35,    36,    37,    38,
    28,    30,    31,    32,    33,    34,    35,    36,    37,    38,
    28,    30,    31,    32,    33,    34,    35,    36,    37,    38,
    28,    30,    31,    32,    33,    34,    35,    36,    37,    38,
    28,    30,    31,    32,    33,    34,    35,    36,    37,    38,
    28,    30,    31,    32,    33,    34,    35,    36,    37,    38,
    28,    30,    31,    32,    33,    34,    35,    36,    37,    38,
    28,    30,    31,    32,    33,    34,    35,    36,    37,    38,
    28,    30,    31,    32,    33,    34,    35,    36,    37,    38,
    28,    30,    31,    32,    33,    34,    35,    36,    37,    38,
   186,    30,    31,    32,    33,    34,    35,    36,    37,    38,
    28,    30,    31,    32,    33,    34,    35,    36,    37,    38,
   107,   108,   109,   110,   124,   125,   126,   127,   128,   129,
   112,    30,    31,    32,    33,    34,    35,    36,    37,    38,
    28,    30,    31,    32,    33,    34,    35,    36,    37,    38,
    30,    31,    32,    33,    34,    35,    36,    37,    38,    30,
    31,    32,    33,    34,    35,    36,    37,    38,    30,    31,
    32,    33,    34,    35,    36,    37,    38,    30,    31,    32,
    33,    34,    35,    36,    37,    38,    30,    31,    32,    33,
    34,    35,    36,    37,    38,    30,    31,    32,    33,    34,
    35,    36,    37,    38,    78,    66,    79,   152,   153,   154,
   150,    66,    79,   152,   153,   154,   183,    66,    79,   152,
   153,   154,   150,    66,    79,   152,   153,   154,   107,   108,
   109,   110,   106,   115,   116,   117,   118,    78,    66,    79,
    82,    65,    66,    63,   120,   121,   122,   147,   142,    74,
    75,    42,    43,    85,   156,    84,    68,   157,   137,   100,
    58,   165,    53,    52,    51,   -53,   170,   171,    45,    44,
   135,   174,   175,   176,   105,   179,   180,   181,   123,   114,
   184,   185,    39,   187,   188 ]

racc_action_check = [
     0,    82,    82,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     5,    45,    45,    45,    45,     0,     5,
     0,   165,   165,   165,   165,   165,   165,    60,    45,    60,
    60,    53,     5,     5,    53,    53,    53,    53,    53,    53,
    53,    53,    53,    53,   142,   142,   142,   142,   142,    53,
    53,    87,    87,    87,    87,    87,    87,    87,    87,    87,
    87,   141,    44,    44,    44,    87,    50,    50,    50,    50,
    50,    50,    50,    50,    50,    50,    44,    25,   103,   103,
    50,    25,    25,    25,    25,    25,    25,    25,    25,    25,
    49,    49,    49,    49,    49,    49,    49,    49,    49,    49,
    66,    66,    66,    66,    66,    66,    66,    66,    66,    66,
   150,   150,   150,   150,   150,   150,   150,   150,   150,   150,
   154,   154,   154,   154,   154,   154,   154,   154,   154,   154,
   147,   147,   147,   147,   147,   147,   147,   147,   147,   147,
   143,   143,   143,   143,   143,   143,   143,   143,   143,   143,
   139,   139,   139,   139,   139,   139,   139,   139,   139,   139,
    13,    13,    13,    13,    13,    13,    13,    13,    13,    13,
    12,    12,    12,    12,    12,    12,    12,    12,    12,    12,
   138,   138,   138,   138,   138,   138,   138,   138,   138,   138,
   132,   132,   132,   132,   132,   132,   132,   132,   132,   132,
   153,   153,   153,   153,   153,   153,   153,   153,   153,   153,
   158,   158,   158,   158,   158,   158,   158,   158,   158,   158,
    99,    99,    99,    99,    99,    99,    99,    99,    99,    99,
   159,   159,   159,   159,   159,   159,   159,   159,   159,   159,
    54,    54,    54,    54,    54,    54,    54,    54,    54,    54,
    97,    97,    97,    97,    97,    97,    97,    97,    97,    97,
    56,    56,    56,    56,    56,    56,    56,    56,    56,    56,
    89,    89,    89,    89,    89,    89,    89,    89,    89,    89,
   183,   183,   183,   183,   183,   183,   183,   183,   183,   183,
    86,    86,    86,    86,    86,    86,    86,    86,    86,    86,
    79,    79,    79,    79,    79,    79,    79,    79,    79,    79,
    65,    65,    65,    65,    65,    65,    65,    65,    65,    65,
   152,   152,   152,   152,   152,   152,   152,   152,   152,   152,
   137,   137,   137,   137,   137,   137,   137,   137,   137,    55,
    55,    55,    55,    55,    55,    55,    55,    55,    74,    74,
    74,    74,    74,    74,    74,    74,    74,    51,    51,    51,
    51,    51,    51,    51,    51,    51,   100,   100,   100,   100,
   100,   100,   100,   100,   100,    78,    78,    78,    78,    78,
    78,    78,    78,    78,   175,   175,   175,   175,   175,   175,
   105,   105,   105,   105,   105,   105,   176,   176,   176,   176,
   176,   176,   160,   160,   160,   160,   160,   160,    63,    63,
    63,    63,    63,    73,    73,    73,    73,    85,    85,    85,
    85,    40,    40,    40,    75,    75,    75,   104,   104,    84,
    84,    91,    91,    47,   106,    46,    42,   114,    98,    57,
    39,   148,    23,    18,    17,    14,   156,   157,    10,     9,
    88,   161,   163,   164,    61,   170,   171,   174,    77,    71,
   179,   181,     1,   184,   187 ]

racc_action_pointer = [
    -6,   462,   nil,   nil,   nil,    11,   nil,   nil,   nil,   443,
   442,   nil,   161,   151,   437,   nil,   nil,   440,   416,   nil,
   nil,   nil,   nil,   434,   nil,    71,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   440,
   412,   nil,   414,   nil,    53,     5,   429,   427,   nil,    81,
    57,   347,   nil,    25,   231,   329,   251,   435,   nil,   nil,
    24,   447,   nil,   399,   nil,   301,    91,   nil,   nil,   nil,
   nil,   436,   nil,   403,   338,   415,   nil,   435,   365,   291,
   nil,   nil,    -8,   nil,   420,   408,   281,    42,   427,   261,
   nil,   410,   nil,   nil,   nil,   nil,   nil,   241,   434,   211,
   356,   nil,   nil,    69,   418,   381,   427,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   431,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   181,   nil,   nil,   nil,   nil,   320,   171,   141,
   nil,    54,    35,   131,   nil,   nil,   nil,   121,   434,   nil,
   101,   nil,   311,   191,   111,   nil,   437,   424,   201,   221,
   393,   444,   nil,   445,   446,    12,   nil,   nil,   nil,   nil,
   446,   433,   nil,   nil,   448,   375,   387,   nil,   nil,   453,
   nil,   452,   nil,   271,   454,   nil,   nil,   455,   nil ]

racc_action_default = [
  -120,  -120,    -1,    -2,    -3,    -4,    -5,    -6,    -7,    -8,
    -9,   -10,  -120,  -120,   -33,   -34,   -35,   -36,   -37,   -42,
   -43,   -44,   -45,  -120,   -54,  -120,   -66,   -67,   -72,   -73,
   -74,   -75,   -76,   -77,   -78,   -79,   -80,   -81,   -82,  -120,
  -120,   -38,   -39,   -40,  -120,  -120,    -8,    -9,   -11,  -120,
  -120,  -120,   -68,  -120,   -57,  -120,  -114,  -120,   189,   -12,
   -13,  -120,   -16,  -120,   -30,  -120,  -120,   -96,   -41,   -27,
   -28,  -120,   -61,  -120,  -120,  -120,   -29,  -120,  -120,  -120,
   -97,  -104,  -120,  -106,  -120,  -120,  -120,  -120,  -120,   -69,
  -118,   -52,   -51,   -53,   -55,   -56,   -60,   -58,  -120,  -115,
  -120,   -14,   -18,  -120,  -120,  -120,  -120,   -91,   -92,   -93,
   -94,   -89,   -95,   -90,   -48,   -62,   -63,   -64,   -65,   -83,
   -84,   -85,   -86,   -49,   -98,   -99,  -100,  -101,  -102,  -103,
  -105,  -107,  -120,   -26,   -46,   -47,  -119,  -120,  -116,   -70,
   -19,  -120,  -120,  -120,   -87,   -20,   -21,  -120,  -120,   -31,
  -120,  -108,  -120,  -120,  -120,  -113,  -120,  -120,   -71,  -117,
  -120,  -120,   -88,  -120,  -120,  -120,  -112,  -109,  -110,  -111,
  -120,  -120,   -59,   -23,  -120,  -120,  -120,   -15,   -32,  -120,
   -50,  -120,   -25,  -120,  -120,   -24,   -22,  -120,   -17 ]

racc_goto_table = [
    13,    81,    56,    89,   148,     5,    57,    14,    23,    54,
   144,   144,    49,    50,   140,   146,   182,   182,    64,   177,
    62,   101,   145,    60,    59,    10,    61,   178,    90,     9,
    15,    16,    56,    17,    18,    19,    98,    20,    21,    97,
    22,    81,   111,    48,    92,     6,     4,    72,    26,    86,
    87,   119,   139,    49,    96,   111,    99,    27,    91,   173,
    93,    94,     3,     2,    67,     1,   113,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    90,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   132,   133,   nil,   158,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    96,   nil,   138,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    90,   nil,   nil,   nil,   nil,   nil,
   119,   nil,   nil,   nil,   119,   nil,   nil,   111,   nil,   nil,
   nil,   nil,   133,   nil,   nil,   nil,   nil,   nil,   159,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   167,   168,   169,   nil,   nil,   nil,   nil,   172,
   111 ]

racc_goto_check = [
    23,    49,    42,    46,    16,     5,    47,    29,    39,    41,
    25,    25,    23,    23,    19,    19,    22,    22,    27,    17,
    18,    14,    20,    13,    12,    10,    15,    28,    42,     9,
    30,    31,    42,    32,    33,    35,    47,    36,    37,    41,
    38,    49,    42,     7,    40,     6,     4,    43,    44,    23,
    23,    42,    46,    23,    23,    42,    23,    45,     5,    16,
    29,    39,     3,     2,    48,     1,    23,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    42,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    23,    23,   nil,    46,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    23,   nil,    23,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    42,   nil,   nil,   nil,   nil,   nil,
    42,   nil,   nil,   nil,    42,   nil,   nil,    42,   nil,   nil,
   nil,   nil,    23,   nil,   nil,   nil,   nil,   nil,    23,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    23,    23,    23,   nil,   nil,   nil,   nil,    23,
    42 ]

racc_goto_pointer = [
   nil,    65,    63,    62,    46,     5,    45,    31,   nil,    29,
    25,   nil,   -16,   -17,   -39,   -14,  -101,  -146,   -20,   -89,
   -82,   nil,  -159,     0,   nil,   -93,   nil,   -22,  -138,     7,
    30,    31,    33,    34,   nil,    35,    37,    38,    40,     8,
    -9,   -16,   -23,     3,    48,    57,   -48,   -19,    24,   -44,
   nil ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   nil,   nil,     7,     8,    46,
    47,    11,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   141,   155,   136,    70,    69,    76,   nil,   149,   nil,
   nil,   nil,   nil,   nil,    41,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    29,   nil,   nil,   nil,   nil,   nil,    80,   151,
    83 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 30, :_reduce_none,
  1, 30, :_reduce_none,
  1, 30, :_reduce_none,
  1, 31, :_reduce_none,
  1, 31, :_reduce_none,
  1, 34, :_reduce_none,
  1, 34, :_reduce_none,
  1, 36, :_reduce_8,
  1, 36, :_reduce_9,
  1, 36, :_reduce_10,
  2, 37, :_reduce_11,
  3, 35, :_reduce_12,
  1, 41, :_reduce_none,
  2, 41, :_reduce_14,
  5, 42, :_reduce_15,
  1, 42, :_reduce_none,
  8, 47, :_reduce_17,
  1, 43, :_reduce_18,
  2, 43, :_reduce_19,
  2, 43, :_reduce_20,
  1, 49, :_reduce_none,
  5, 49, :_reduce_22,
  3, 48, :_reduce_23,
  5, 48, :_reduce_24,
  4, 48, :_reduce_25,
  4, 38, :_reduce_26,
  1, 53, :_reduce_none,
  3, 39, :_reduce_28,
  3, 40, :_reduce_29,
  1, 44, :_reduce_none,
  1, 45, :_reduce_none,
  1, 46, :_reduce_none,
  1, 32, :_reduce_none,
  1, 32, :_reduce_none,
  1, 32, :_reduce_none,
  1, 32, :_reduce_none,
  1, 32, :_reduce_none,
  2, 58, :_reduce_38,
  1, 63, :_reduce_39,
  1, 63, :_reduce_40,
  2, 63, :_reduce_41,
  1, 59, :_reduce_none,
  1, 59, :_reduce_none,
  1, 59, :_reduce_none,
  1, 59, :_reduce_none,
  4, 64, :_reduce_46,
  4, 64, :_reduce_47,
  4, 65, :_reduce_48,
  4, 66, :_reduce_49,
  7, 67, :_reduce_50,
  3, 60, :_reduce_51,
  1, 68, :_reduce_none,
  1, 68, :_reduce_none,
  1, 68, :_reduce_54,
  1, 69, :_reduce_none,
  1, 69, :_reduce_56,
  2, 61, :_reduce_57,
  3, 61, :_reduce_58,
  5, 70, :_reduce_59,
  2, 70, :_reduce_60,
  3, 62, :_reduce_61,
  2, 72, :_reduce_62,
  2, 72, :_reduce_63,
  2, 72, :_reduce_64,
  2, 72, :_reduce_65,
  1, 33, :_reduce_none,
  1, 33, :_reduce_none,
  2, 73, :_reduce_68,
  3, 74, :_reduce_69,
  4, 74, :_reduce_70,
  5, 74, :_reduce_71,
  1, 52, :_reduce_72,
  1, 52, :_reduce_none,
  1, 71, :_reduce_74,
  1, 71, :_reduce_75,
  1, 71, :_reduce_76,
  1, 71, :_reduce_77,
  1, 71, :_reduce_78,
  1, 71, :_reduce_79,
  1, 71, :_reduce_80,
  1, 71, :_reduce_81,
  1, 71, :_reduce_82,
  2, 54, :_reduce_83,
  2, 54, :_reduce_84,
  2, 54, :_reduce_85,
  2, 54, :_reduce_86,
  1, 50, :_reduce_none,
  2, 50, :_reduce_88,
  2, 77, :_reduce_89,
  2, 77, :_reduce_90,
  2, 77, :_reduce_91,
  2, 77, :_reduce_92,
  2, 77, :_reduce_93,
  2, 77, :_reduce_94,
  2, 56, :_reduce_95,
  1, 56, :_reduce_none,
  1, 78, :_reduce_none,
  2, 78, :_reduce_98,
  2, 78, :_reduce_99,
  2, 78, :_reduce_100,
  2, 78, :_reduce_101,
  2, 78, :_reduce_102,
  2, 78, :_reduce_103,
  1, 79, :_reduce_none,
  2, 79, :_reduce_105,
  1, 55, :_reduce_none,
  2, 55, :_reduce_107,
  1, 51, :_reduce_none,
  2, 51, :_reduce_109,
  2, 51, :_reduce_110,
  2, 51, :_reduce_111,
  2, 57, :_reduce_112,
  1, 57, :_reduce_none,
  1, 76, :_reduce_114,
  2, 76, :_reduce_115,
  3, 76, :_reduce_116,
  4, 76, :_reduce_117,
  1, 75, :_reduce_118,
  2, 75, :_reduce_119 ]

racc_reduce_n = 120

racc_shift_n = 189

racc_token_table = {
  false => 0,
  :error => 1,
  :T => 2,
  :Z => 3,
  :E => 4,
  :PLUS => 5,
  :MINUS => 6,
  :COLON => 7,
  :SLASH => 8,
  :D0 => 9,
  :D1 => 10,
  :D2 => 11,
  :D3 => 12,
  :D4 => 13,
  :D5 => 14,
  :D6 => 15,
  :D7 => 16,
  :D8 => 17,
  :D9 => 18,
  :LP => 19,
  :RP => 20,
  :UNCERTAIN => 21,
  :APPROXIMATE => 22,
  :UNSPECIFIED => 23,
  :UNKNOWN => 24,
  :OPEN => 25,
  :LONGYEAR => 26,
  :CARET => 27,
  :UNMATCHED => 28 }

racc_nt_base = 29

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "T",
  "Z",
  "E",
  "PLUS",
  "MINUS",
  "COLON",
  "SLASH",
  "D0",
  "D1",
  "D2",
  "D3",
  "D4",
  "D5",
  "D6",
  "D7",
  "D8",
  "D9",
  "LP",
  "RP",
  "UNCERTAIN",
  "APPROXIMATE",
  "UNSPECIFIED",
  "UNKNOWN",
  "OPEN",
  "LONGYEAR",
  "CARET",
  "UNMATCHED",
  "$start",
  "edtf",
  "level_0_expression",
  "level_1_expression",
  "level_2_expression",
  "date",
  "date_time",
  "positive_date",
  "negative_date",
  "year",
  "year_month",
  "year_month_day",
  "time",
  "base_time",
  "zone_offset",
  "hour",
  "minute",
  "second",
  "midnight",
  "zone_offset_hour",
  "positive_zone_offset",
  "d01_13",
  "d01_59",
  "digit",
  "month",
  "d01_12",
  "d01_31",
  "d00_23",
  "d00_59",
  "uncertain_or_approximate_date",
  "unspecified",
  "level_1_interval",
  "long_year_simple",
  "season",
  "uncertain_or_approximate",
  "unspecified_year",
  "unspecified_month",
  "unspecified_day",
  "unspecified_day_and_month",
  "level_1_start",
  "level_1_end",
  "long_year",
  "positive_digit",
  "season_number",
  "season_qualified",
  "long_year_scientific",
  "integer",
  "int1_4",
  "d01_23",
  "d01_29",
  "d01_30" ]

Racc_debug_parser = true

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

# reduce 2 omitted

# reduce 3 omitted

# reduce 4 omitted

# reduce 5 omitted

# reduce 6 omitted

# reduce 7 omitted

module_eval(<<'.,.,', 'parser.y', 26)
  def _reduce_8(val, _values, result)
     result = Date.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 27)
  def _reduce_9(val, _values, result)
     result = Date.new(*val.flatten) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 28)
  def _reduce_10(val, _values, result)
     result = Date.new(*val.flatten) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 30)
  def _reduce_11(val, _values, result)
     result = Date.new(-1 * val[1].year, val[1].month, val[1].day) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 33)
  def _reduce_12(val, _values, result)
     result = DateTime.new(val[0].year, val[0].month, val[0].day, *val[2]) 
    result
  end
.,.,

# reduce 13 omitted

module_eval(<<'.,.,', 'parser.y', 36)
  def _reduce_14(val, _values, result)
     result = val.flatten 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 38)
  def _reduce_15(val, _values, result)
     result = [val[0], val[2], val[4]] 
    result
  end
.,.,

# reduce 16 omitted

module_eval(<<'.,.,', 'parser.y', 41)
  def _reduce_17(val, _values, result)
     result = [24, 0, 0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 43)
  def _reduce_18(val, _values, result)
     result = 0 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 44)
  def _reduce_19(val, _values, result)
     result = -1 * val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 45)
  def _reduce_20(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 21 omitted

module_eval(<<'.,.,', 'parser.y', 48)
  def _reduce_22(val, _values, result)
     result = 0 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 51)
  def _reduce_23(val, _values, result)
     result = Rational(val[0] * 60 + val[2], 1440) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 52)
  def _reduce_24(val, _values, result)
     result = Rational(840, 1440) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 53)
  def _reduce_25(val, _values, result)
     result = Rational(val[3], 1440) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 55)
  def _reduce_26(val, _values, result)
     result = val.zip([1000,100,10,1]).reduce(0) { |s,(a,b)| s += a * b } 
    result
  end
.,.,

# reduce 27 omitted

module_eval(<<'.,.,', 'parser.y', 59)
  def _reduce_28(val, _values, result)
     result = [val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 65)
  def _reduce_29(val, _values, result)
     result = val[0] << val[2]; raise ArgumentError, "invalid date (invalid days #{result[2]} for month #{result[1]})" if result[2] > 31 || (result[2] > 30 && [2,4,6,9,11].include?(result[1])) || (result[2] > 29 && result[1] == 2) 
    result
  end
.,.,

# reduce 30 omitted

# reduce 31 omitted

# reduce 32 omitted

# reduce 33 omitted

# reduce 34 omitted

# reduce 35 omitted

# reduce 36 omitted

# reduce 37 omitted

module_eval(<<'.,.,', 'parser.y', 85)
  def _reduce_38(val, _values, result)
     result = val[0]; val[1].each { |m| result.send(m) } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 87)
  def _reduce_39(val, _values, result)
     result = [:uncertain!] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 88)
  def _reduce_40(val, _values, result)
     result = [:approximate!] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 89)
  def _reduce_41(val, _values, result)
     result = [:uncertain!, :approximate!] 
    result
  end
.,.,

# reduce 42 omitted

# reduce 43 omitted

# reduce 44 omitted

# reduce 45 omitted

module_eval(<<'.,.,', 'parser.y', 97)
  def _reduce_46(val, _values, result)
     result = Date.new(val[0,3].zip([1000,100,10]).reduce(0) { |s,(a,b)| s += a * b }); result.unspecified.year[3] = true 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 98)
  def _reduce_47(val, _values, result)
     result = Date.new(val[0,2].zip([1000,100]).reduce(0) { |s,(a,b)| s += a * b }); result.unspecified.year[2,2] = true 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 100)
  def _reduce_48(val, _values, result)
     result = Date.new(val[0]).unspecified!(:month) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 102)
  def _reduce_49(val, _values, result)
     result = Date.new(*val[0]).unspecified!(:day) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 104)
  def _reduce_50(val, _values, result)
     result = Date.new(val[0]).unspecified!([:day,:month]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 107)
  def _reduce_51(val, _values, result)
     result = Interval.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 52 omitted

# reduce 53 omitted

module_eval(<<'.,.,', 'parser.y', 111)
  def _reduce_54(val, _values, result)
     result = :unknown 
    result
  end
.,.,

# reduce 55 omitted

module_eval(<<'.,.,', 'parser.y', 114)
  def _reduce_56(val, _values, result)
     result = :open 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 117)
  def _reduce_57(val, _values, result)
     result = Date.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 118)
  def _reduce_58(val, _values, result)
     result = Date.new(-1 * val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 120)
  def _reduce_59(val, _values, result)
     result = val.zip([10000,1000,100,10,1]).reduce(0) { |s,(a,b)| s += a * b } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 121)
  def _reduce_60(val, _values, result)
     result = 10 * val[0] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 124)
  def _reduce_61(val, _values, result)
     result = Date.new(val[0]); result.season = val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 126)
  def _reduce_62(val, _values, result)
     result = 21 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 127)
  def _reduce_63(val, _values, result)
     result = 22 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 128)
  def _reduce_64(val, _values, result)
     result = 23 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 129)
  def _reduce_65(val, _values, result)
     result = 24 
    result
  end
.,.,

# reduce 66 omitted

# reduce 67 omitted

module_eval(<<'.,.,', 'parser.y', 145)
  def _reduce_68(val, _values, result)
     result = val[0]; result.qualifier = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 147)
  def _reduce_69(val, _values, result)
     result = Date.new(val[0].year * 10 ** val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 148)
  def _reduce_70(val, _values, result)
     result = Date.new(val[1] * 10 ** val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 149)
  def _reduce_71(val, _values, result)
     result = Date.new(-1 * val[2] * 10 ** val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 154)
  def _reduce_72(val, _values, result)
     result = 0 
    result
  end
.,.,

# reduce 73 omitted

module_eval(<<'.,.,', 'parser.y', 157)
  def _reduce_74(val, _values, result)
     result = 1 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 158)
  def _reduce_75(val, _values, result)
     result = 2 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 159)
  def _reduce_76(val, _values, result)
     result = 3 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 160)
  def _reduce_77(val, _values, result)
     result = 4 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 161)
  def _reduce_78(val, _values, result)
     result = 5 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 162)
  def _reduce_79(val, _values, result)
     result = 6 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 163)
  def _reduce_80(val, _values, result)
     result = 7 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 164)
  def _reduce_81(val, _values, result)
     result = 8 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 165)
  def _reduce_82(val, _values, result)
     result = 9 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 167)
  def _reduce_83(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 168)
  def _reduce_84(val, _values, result)
     result = 10 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 169)
  def _reduce_85(val, _values, result)
     result = 11 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 170)
  def _reduce_86(val, _values, result)
     result = 12 
    result
  end
.,.,

# reduce 87 omitted

module_eval(<<'.,.,', 'parser.y', 173)
  def _reduce_88(val, _values, result)
     result = 13 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 175)
  def _reduce_89(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 176)
  def _reduce_90(val, _values, result)
     result = 10 + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 177)
  def _reduce_91(val, _values, result)
     result = 20 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 178)
  def _reduce_92(val, _values, result)
     result = 21 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 179)
  def _reduce_93(val, _values, result)
     result = 22 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 180)
  def _reduce_94(val, _values, result)
     result = 23 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 182)
  def _reduce_95(val, _values, result)
     result = 0  
    result
  end
.,.,

# reduce 96 omitted

# reduce 97 omitted

module_eval(<<'.,.,', 'parser.y', 186)
  def _reduce_98(val, _values, result)
     result = 24 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 187)
  def _reduce_99(val, _values, result)
     result = 25 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 188)
  def _reduce_100(val, _values, result)
     result = 26 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 189)
  def _reduce_101(val, _values, result)
     result = 27 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 190)
  def _reduce_102(val, _values, result)
     result = 28 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 191)
  def _reduce_103(val, _values, result)
     result = 29 
    result
  end
.,.,

# reduce 104 omitted

module_eval(<<'.,.,', 'parser.y', 194)
  def _reduce_105(val, _values, result)
     result = 30 
    result
  end
.,.,

# reduce 106 omitted

module_eval(<<'.,.,', 'parser.y', 197)
  def _reduce_107(val, _values, result)
     result = 31 
    result
  end
.,.,

# reduce 108 omitted

module_eval(<<'.,.,', 'parser.y', 200)
  def _reduce_109(val, _values, result)
     result = 30 + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 201)
  def _reduce_110(val, _values, result)
     result = 40 + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 202)
  def _reduce_111(val, _values, result)
     result = 50 + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 204)
  def _reduce_112(val, _values, result)
     result = 0 
    result
  end
.,.,

# reduce 113 omitted

module_eval(<<'.,.,', 'parser.y', 207)
  def _reduce_114(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 208)
  def _reduce_115(val, _values, result)
     result = 10 * val[0] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 209)
  def _reduce_116(val, _values, result)
     result = val.zip([100,10,1]).reduce(0) { |s,(a,b)| s += a * b } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 210)
  def _reduce_117(val, _values, result)
     result = val.zip([1000,100,10,1]).reduce(0) { |s,(a,b)| s += a * b } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 212)
  def _reduce_118(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 213)
  def _reduce_119(val, _values, result)
     result = 10 * val[0] + val[1] 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module EDTF
